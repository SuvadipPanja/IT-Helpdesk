// ============================================
// Main Server File
// Entry point for the IT Helpdesk application
// UPDATED: Added SLA Breach Detection Job
// Developed by: Suvadip Panja
// Date: November 01, 2025
// ============================================

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');
const path = require('path');
const fs = require('fs');

// Import configurations and utilities
const config = require('./config/config');
const logger = require('./utils/logger');
const { testConnection, closePool } = require('./config/database');
const { errorHandler, notFoundHandler } = require('./middleware/errorHandler');
const requestLogger = require('./middleware/requestLogger');

// ============================================
// IMPORT BACKGROUND JOBS
// ============================================
const emailProcessorJob = require('./jobs/emailProcessor.job');
const autoEscalationJob = require('./jobs/autoEscalation.job');
const autoCloseJob = require('./jobs/autoClose.job');
const slaBreachJob = require('./jobs/slaBreach.job'); // ‚≠ê NEW! SLA Breach Detection

// Initialize Express app
const app = express();

// ============================================
// Security Middleware
// ============================================

logger.info('Initializing security middleware');

// Helmet - Security headers
app.use(helmet({
  contentSecurityPolicy: false, // Disable for development
  crossOriginEmbedderPolicy: false,
  crossOriginResourcePolicy: false, // Allow cross-origin resources
}));

// CORS - Cross-Origin Resource Sharing
app.use(cors(config.cors));

// Additional CORS headers for static files
app.use((req, res, next) => {
  res.setHeader('Cross-Origin-Resource-Policy', 'cross-origin');
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  next();
});

logger.success('CORS enabled', { origin: config.cors.origin });

// Rate limiting
const limiter = rateLimit({
  windowMs: config.security.rateLimitWindowMs,
  max: config.security.rateLimitMaxRequests,
  message: 'Too many requests from this IP, please try again later.',
  standardHeaders: true,
  legacyHeaders: false,
  handler: (req, res) => {
    logger.warn('Rate limit exceeded', {
      ip: req.ip,
      url: req.originalUrl,
    });
    res.status(429).json({
      success: false,
      message: 'Too many requests, please try again later.',
    });
  },
});

app.use('/api/', limiter);
logger.success('Rate limiting enabled', {
  window: `${config.security.rateLimitWindowMs / 1000 / 60} minutes`,
  max: config.security.rateLimitMaxRequests,
});

// ============================================
// Body Parser Middleware
// ============================================

logger.info('Initializing body parsers');

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

logger.success('Body parsers initialized');

// ============================================
// Compression Middleware
// ============================================

app.use(compression());
logger.success('Response compression enabled');

// ============================================
// Request Logging Middleware
// ============================================

app.use(requestLogger);

// ============================================
// Create Upload Directories
// ============================================

const createUploadDirectories = () => {
  const directories = [
    path.join(__dirname, 'uploads'),
    path.join(__dirname, 'uploads', 'tickets'),
    path.join(__dirname, 'uploads', 'profiles'),
    path.join(__dirname, 'uploads', 'documents')
  ];

  directories.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      logger.success('Directory created', { path: dir });
    } else {
      logger.info('Directory exists', { path: dir });
    }
  });
};

createUploadDirectories();

// ============================================
// Static Files - Serve with CORS headers
// ============================================

const uploadDir = path.join(__dirname, 'uploads');

// Static file serving with CORS headers
app.use('/uploads', express.static(uploadDir, {
  setHeaders: (res, filePath) => {
    // Log each file request for debugging
    console.log('üìÅ Serving static file:', filePath);
    
    // Add CORS headers for cross-origin access
    res.set('Access-Control-Allow-Origin', '*');
    res.set('Cross-Origin-Resource-Policy', 'cross-origin');
    res.set('Cache-Control', 'public, max-age=31536000');
    
    // Set proper content type based on file extension
    if (filePath.endsWith('.jpg') || filePath.endsWith('.jpeg')) {
      res.set('Content-Type', 'image/jpeg');
    } else if (filePath.endsWith('.png')) {
      res.set('Content-Type', 'image/png');
    } else if (filePath.endsWith('.gif')) {
      res.set('Content-Type', 'image/gif');
    } else if (filePath.endsWith('.webp')) {
      res.set('Content-Type', 'image/webp');
    }
  }
}));

// Debug route to test uploads directory
app.get('/test-uploads', (req, res) => {
  const profilesPath = path.join(uploadDir, 'profiles');
  const ticketsPath = path.join(uploadDir, 'tickets');
  
  try {
    const profileFiles = fs.existsSync(profilesPath) ? fs.readdirSync(profilesPath) : [];
    const ticketFiles = fs.existsSync(ticketsPath) ? fs.readdirSync(ticketsPath) : [];
    
    res.json({
      success: true,
      uploadDir: uploadDir,
      profilesPath: profilesPath,
      ticketsPath: ticketsPath,
      profileFiles: profileFiles,
      ticketFiles: ticketFiles,
      message: 'Uploads directory is accessible'
    });
  } catch (error) {
    res.json({
      success: false,
      error: error.message,
      uploadDir: uploadDir,
      profilesPath: profilesPath,
      ticketsPath: ticketsPath
    });
  }
});

logger.success('Static file serving enabled with CORS', { path: '/uploads', dir: uploadDir });
console.log('‚úÖ Static files configured:', uploadDir);
console.log('üìÅ Profiles folder:', path.join(uploadDir, 'profiles'));
console.log('üìÅ Tickets folder:', path.join(uploadDir, 'tickets'));
console.log('üîì CORS enabled for static files');

// ============================================
// Health Check Route
// ============================================

app.get('/health', (req, res) => {
  logger.info('Health check requested');
  res.json({
    success: true,
    message: 'Server is running',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: config.env,
    version: '1.0.0'
  });
});

// Root endpoint
app.get('/', (req, res) => {
  res.json({
    success: true,
    message: 'IT Helpdesk API Server',
    version: '1.0.0',
    documentation: `http://localhost:${config.port}${config.apiPrefix}`,
    endpoints: {
      health: '/health',
      testUploads: '/test-uploads',
      auth: `${config.apiPrefix}/auth`,
      users: `${config.apiPrefix}/users`,
      tickets: `${config.apiPrefix}/tickets`,
      system: `${config.apiPrefix}/system`,
      departments: `${config.apiPrefix}/departments`,
      roles: `${config.apiPrefix}/roles`,
      analytics: `${config.apiPrefix}/analytics`,
      profile: `${config.apiPrefix}/profile`,
      settings: `${config.apiPrefix}/settings`,
      emailQueue: `${config.apiPrefix}/email-queue`,
      emailTemplates: `${config.apiPrefix}/email-templates`,
      ticketApprovals: `${config.apiPrefix}/ticket-approvals`
    }
  });
});

// ============================================
// API Routes
// ============================================

logger.info('Initializing API routes');

// Import routes
const authRoutes = require('./routes/auth.routes');
const usersRoutes = require('./routes/users.routes');
const systemRoutes = require('./routes/system.routes');
const ticketRoutes = require('./routes/tickets.routes');
const attachmentsRoutes = require('./routes/attachments.routes'); // ‚≠ê ADDED!
const departmentsRoutes = require('./routes/departments.routes');
const rolesRoutes = require('./routes/roles.routes');
const analyticsRoutes = require('./routes/analytics.routes');
const dashboardRoutes = require('./routes/dashboard.routes');
const notificationsRoutes = require('./routes/notifications.routes');
const profileRoutes = require('./routes/profile.routes');
const settingsRoutes = require('./routes/settings.routes');
const emailQueueRoutes = require('./routes/emailQueue.routes');
const emailTemplatesRoutes = require('./routes/emailTemplates.routes');
const ticketApprovalsRoutes = require('./routes/ticketApprovals.routes');

// Mount routes
app.use(`${config.apiPrefix}/auth`, authRoutes);
app.use(`${config.apiPrefix}/users`, usersRoutes);
app.use(`${config.apiPrefix}/system`, systemRoutes);
app.use(`${config.apiPrefix}/tickets`, ticketRoutes);
app.use(`${config.apiPrefix}/tickets`, attachmentsRoutes); // ‚≠ê ADDED!
app.use(`${config.apiPrefix}/departments`, departmentsRoutes);
app.use(`${config.apiPrefix}/roles`, rolesRoutes);
app.use(`${config.apiPrefix}/analytics`, analyticsRoutes);
app.use(`${config.apiPrefix}/dashboard`, dashboardRoutes);
app.use(`${config.apiPrefix}/notifications`, notificationsRoutes);
app.use(`${config.apiPrefix}/profile`, profileRoutes);
app.use(`${config.apiPrefix}/settings`, settingsRoutes);
app.use(`${config.apiPrefix}/email-queue`, emailQueueRoutes);
app.use(`${config.apiPrefix}/email-templates`, emailTemplatesRoutes);
app.use(`${config.apiPrefix}/ticket-approvals`, ticketApprovalsRoutes);

logger.success('API routes initialized', { 
  prefix: config.apiPrefix,
  routes: [
    'auth',
    'users',
    'system',
    'tickets',
    'attachments',
    'departments',
    'roles',
    'analytics',
    'dashboard',
    'notifications',
    'profile',
    'settings',
    'email-queue',
    'email-templates',
    'ticket-approvals'
  ]
});

// ============================================
// Error Handling
// ============================================

// 404 handler
app.use(notFoundHandler);

// Global error handler
app.use(errorHandler);

logger.success('Error handlers initialized');

// ============================================
// Database Connection Test
// ============================================

const initializeDatabase = async () => {
  try {
    logger.separator('DATABASE CONNECTION TEST');
    logger.try('Testing database connection');
    
    const isConnected = await testConnection();
    
    if (isConnected) {
      logger.success('Database connection test passed');
      logger.info('Database details', {
        server: config.database.server,
        database: config.database.database,
        user: config.database.user,
      });
      logger.separator();
      return true;
    } else {
      logger.error('Database connection test failed');
      logger.separator();
      return false;
    }
  } catch (error) {
    logger.error('Database initialization error', error);
    logger.separator();
    return false;
  }
};

// ============================================
// Server Startup
// ============================================

const startServer = async () => {
  try {
    logger.separator('SERVER INITIALIZATION');
    logger.info('Starting IT Helpdesk Backend Server');
    logger.info('Environment', { env: config.env });
    logger.info('Node Version', { version: process.version });
    logger.info('Platform', { platform: process.platform });
    
    // Test database connection
    const dbConnected = await initializeDatabase();
    
    if (!dbConnected) {
      logger.error('Failed to connect to database. Server will not start.');
      logger.warn('Please check your database configuration in .env file');
      process.exit(1);
    }
    
    // Start server
    const server = app.listen(config.port, () => {
      logger.separator('SERVER STARTED SUCCESSFULLY');
      logger.success(`Server is running on port ${config.port}`);
      logger.success(`API Base URL: http://localhost:${config.port}${config.apiPrefix}`);
      logger.success(`Health Check: http://localhost:${config.port}/health`);
      logger.success(`Test Uploads: http://localhost:${config.port}/test-uploads`);
      logger.info('Server Details', {
        port: config.port,
        environment: config.env,
        apiPrefix: config.apiPrefix,
        pid: process.pid,
        uploadDir: path.join(__dirname, 'uploads')
      });
      logger.separator();
      logger.info('üéâ IT Helpdesk Backend is ready to accept requests!');
      logger.info('üìÇ File uploads enabled at: /uploads');
      logger.info('üñºÔ∏è Profile pictures: /uploads/profiles');
      logger.info('üìé Ticket attachments: /uploads/tickets');
      logger.info('üîì CORS enabled for cross-origin requests');
      logger.info('üîó Attachments endpoint: /api/v1/tickets/:id/attachments');
      logger.info('üë• Users endpoint: /api/v1/users');
      logger.info('üë§ Profile endpoint: /api/v1/profile');
      logger.info('üìß Email Queue endpoint: /api/v1/email-queue');
      logger.info('üìù Email Templates endpoint: /api/v1/email-templates');
      logger.info('‚úÖ Ticket Approvals endpoint: /api/v1/ticket-approvals');
      logger.info('Press CTRL+C to stop the server');
      logger.separator();
      
      // ============================================
      // START BACKGROUND JOBS
      // ============================================
      logger.separator('STARTING BACKGROUND JOBS');
      
      // Start email processor job
      logger.info('üìß Starting Email Processor Job...');
      emailProcessorJob.start();
      
      // Start auto-escalation job
      logger.info('üö® Starting Auto-Escalation Job...');
      autoEscalationJob.start();
      
      // Start auto-close job
      logger.info('üîí Starting Auto-Close Job...');
      autoCloseJob.start();
      
      // Start SLA breach detection job
      logger.info('‚ö†Ô∏è Starting SLA Breach Detection Job...');
      slaBreachJob.start(); // ‚≠ê NEW! SLA Breach Detection
      
      logger.separator();
    });

    // Handle server errors
    server.on('error', (error) => {
      if (error.code === 'EADDRINUSE') {
        logger.error(`Port ${config.port} is already in use`);
        logger.info('Please try a different port or stop the other application');
      } else {
        logger.error('Server error', error);
      }
      process.exit(1);
    });

    // Graceful shutdown
    const gracefulShutdown = async (signal) => {
      logger.separator('GRACEFUL SHUTDOWN');
      logger.warn(`${signal} received, closing server gracefully`);
      
      // Stop background jobs
      logger.info('Stopping background jobs...');
      emailProcessorJob.stop();
      autoEscalationJob.stop();
      autoCloseJob.stop();
      slaBreachJob.stop(); // ‚≠ê NEW! Stop SLA Breach Detection
      
      server.close(async () => {
        logger.info('HTTP server closed');
        
        try {
          await closePool();
          logger.info('Database connections closed');
        } catch (error) {
          logger.error('Error closing database connections', error);
        }
        
        logger.success('Shutdown complete');
        logger.separator();
        process.exit(0);
      });

      // Force shutdown after 10 seconds
      setTimeout(() => {
        logger.error('Forced shutdown after timeout');
        process.exit(1);
      }, 10000);
    };

    // Listen for termination signals
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    // Handle uncaught exceptions
    process.on('uncaughtException', (error) => {
      logger.error('Uncaught Exception', error);
      gracefulShutdown('UNCAUGHT_EXCEPTION');
    });

    // Handle unhandled promise rejections
    process.on('unhandledRejection', (reason, promise) => {
      logger.error('Unhandled Rejection', {
        reason: reason,
        promise: promise,
      });
    });

  } catch (error) {
    logger.error('Failed to start server', error);
    process.exit(1);
  }
};

// ============================================
// Start Application
// ============================================

startServer();

module.exports = app;