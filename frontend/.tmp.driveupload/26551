// ============================================
// SETTINGS PAGE - COMPLETE IMPLEMENTATION
// ALL 95 SETTINGS FROM DATABASE - FULLY FUNCTIONAL
// Every tab populated with real settings
// UPDATED: Added Auto-Close Enable Toggle Button
// Developed by: Suvadip Panja
// Date: November 01, 2025
// ============================================

import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';
import { 
  Settings as SettingsIcon, 
  Mail, 
  Bell, 
  Shield, 
  Save, 
  RefreshCw, 
  AlertCircle, 
  CheckCircle, 
  Eye, 
  EyeOff, 
  Send,
  Loader,
  Globe,
  Ticket,
  Clock,
  Lock,
  Palette,
  Database,
  FileText,
  Link,
  User,
  Calendar,
  AlertTriangle,
  MessageSquare,
  Zap,
  Tag,
  HelpCircle,
  ListOrdered,
  Power
} from 'lucide-react';
import api from '../../services/api';
import '../../styles/Settings.css';

const Settings = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState('general');
  const [settings, setSettings] = useState({});
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [testing, setTesting] = useState(false);
  const [message, setMessage] = useState({ type: '', text: '' });
  const [showPassword, setShowPassword] = useState(false);
  const [testResult, setTestResult] = useState(null);
  const [testEmail, setTestEmail] = useState('');
  const [sendingTestEmail, setSendingTestEmail] = useState(false);
  const [priorities, setPriorities] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loadingLookups, setLoadingLookups] = useState(false);

  // Tab configuration with icons
  const tabs = [
    { id: 'general', label: 'General', icon: Globe },
    { id: 'email', label: 'Email & SMTP', icon: Mail },
    { id: 'ticket', label: 'Tickets', icon: Ticket },
    { id: 'sla', label: 'SLA', icon: Clock },
    { id: 'security', label: 'Security', icon: Shield },
    { id: 'notifications', label: 'Notifications', icon: Bell },
    { id: 'appearance', label: 'Appearance', icon: Palette },
    { id: 'backup', label: 'Backup', icon: Database },
    { id: 'audit', label: 'Audit', icon: FileText },
    { id: 'integration', label: 'Integration', icon: Link },
  ];

  // Fetch settings on mount
  useEffect(() => {
    fetchSettings();
    fetchLookups();
  }, []);

  // ============================================
  // FETCH SETTINGS FROM API
  // ============================================
  const fetchSettings = async () => {
    setLoading(true);
    setMessage({ type: '', text: '' });

    try {
      const response = await api.get('/settings');
      
      if (response.data.success) {
        setSettings(response.data.data.settings);
      }
    } catch (error) {
      console.error('Failed to fetch settings:', error);
      setMessage({
        type: 'error',
        text: error.response?.data?.message || 'Failed to load settings'
      });
    } finally {
      setLoading(false);
    }
  };

  // ============================================
  // FETCH LOOKUPS (PRIORITIES & CATEGORIES)
  // ============================================
  const fetchLookups = async () => {
    setLoadingLookups(true);
    try {
      const response = await api.get('/system/lookups/settings');
      if (response.data.success) {
        setPriorities(response.data.data.priorities);
        setCategories(response.data.data.categories);
      }
    } catch (error) {
      console.error('Failed to fetch lookups:', error);
    } finally {
      setLoadingLookups(false);
    }
  };

  // ============================================
  // HANDLE SETTING CHANGE
  // ============================================
  const handleSettingChange = (category, key, value) => {
    setSettings(prev => ({
      ...prev,
      [category]: {
        ...prev[category],
        [key]: {
          ...prev[category]?.[key],
          value: value
        }
      }
    }));
  };

  // ============================================
  // SAVE SETTINGS
  // ============================================
  const handleSaveSettings = async () => {
    setSaving(true);
    setMessage({ type: '', text: '' });

    try {
      const settingsToUpdate = {};
      
      Object.keys(settings).forEach(category => {
        Object.keys(settings[category]).forEach(key => {
          settingsToUpdate[key] = settings[category][key].value;
        });
      });

      const response = await api.put('/settings/bulk', {
        settings: settingsToUpdate
      });

      if (response.data.success) {
        setMessage({
          type: 'success',
          text: 'Settings saved successfully!'
        });
        
        await fetchSettings();
      }
    } catch (error) {
      console.error('Failed to save settings:', error);
      setMessage({
        type: 'error',
        text: error.response?.data?.message || 'Failed to save settings'
      });
    } finally {
      setSaving(false);
    }
  };

  // ============================================
  // TEST SMTP CONNECTION
  // ============================================
  const handleTestSMTP = async () => {
    setTesting(true);
    setTestResult(null);

    try {
      const response = await api.post('/settings/test-smtp');
      
      setTestResult({
        success: response.data.success,
        message: response.data.message
      });
    } catch (error) {
      setTestResult({
        success: false,
        message: error.response?.data?.message || 'SMTP test failed'
      });
    } finally {
      setTesting(false);
    }
  };

  // ============================================
  // SEND TEST EMAIL
  // ============================================
  const handleSendTestEmail = async () => {
    if (!testEmail || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(testEmail)) {
      setMessage({
        type: 'error',
        text: 'Please enter a valid email address'
      });
      return;
    }

    setSendingTestEmail(true);
    setMessage({ type: '', text: '' });

    try {
      const response = await api.post('/settings/send-test-email', {
        email: testEmail
      });

      if (response.data.success) {
        setMessage({
          type: 'success',
          text: 'Test email sent successfully! Check your inbox.'
        });
        setTestEmail('');
      }
    } catch (error) {
      setMessage({
        type: 'error',
        text: error.response?.data?.message || 'Failed to send test email'
      });
    } finally {
      setSendingTestEmail(false);
    }
  };

  // Navigate to Email Queue
  const handleViewEmailQueue = () => {
    navigate('/email-queue');
  };

  // Navigate to Email Templates
  const handleViewEmailTemplates = () => {
    navigate('/email-templates');
  };

  // Check permission
  if (!user?.permissions?.can_manage_system) {
    return (
      <div style={{ padding: '40px', textAlign: 'center' }}>
        <Shield size={48} style={{ color: '#ef4444', marginBottom: '16px' }} />
        <h2 style={{ color: '#1e293b', marginBottom: '8px' }}>Access Denied</h2>
        <p style={{ color: '#64748b' }}>
          You don't have permission to access system settings.
        </p>
      </div>
    );
  }

  if (loading) {
    return (
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        minHeight: '400px' 
      }}>
        <Loader className="spinner" size={32} />
      </div>
    );
  }

  return (
    <div className="settings-page">
      {/* Header */}
      <div className="settings-header">
        <div className="settings-header-left">
          <SettingsIcon size={32} />
          <div>
            <h1>System Settings</h1>
            <p>Configure and manage your helpdesk system</p>
          </div>
        </div>
        <div className="settings-header-actions">
          <button 
            className="btn-secondary" 
            onClick={fetchSettings}
            disabled={loading}
          >
            <RefreshCw size={18} />
            Refresh
          </button>
          <button 
            className="btn-primary" 
            onClick={handleSaveSettings}
            disabled={saving}
          >
            {saving ? (
              <>
                <Loader size={18} className="spinner" />
                Saving...
              </>
            ) : (
              <>
                <Save size={18} />
                Save Changes
              </>
            )}
          </button>
        </div>
      </div>

      {/* Success/Error Message */}
      {message.text && (
        <div className={`alert alert-${message.type}`}>
          {message.type === 'success' ? (
            <CheckCircle size={20} />
          ) : (
            <AlertCircle size={20} />
          )}
          <span>{message.text}</span>
        </div>
      )}

      {/* Main Content */}
      <div className="settings-container">
        {/* Sidebar Tabs */}
        <div className="settings-tabs">
          {tabs.map(tab => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                className={`settings-tab ${activeTab === tab.id ? 'active' : ''}`}
                onClick={() => setActiveTab(tab.id)}
              >
                <Icon size={18} />
                <span>{tab.label}</span>
              </button>
            );
          })}
        </div>

        {/* Tab Content */}
        <div className="settings-content">
          {/* GENERAL TAB */}
          {activeTab === 'general' && (
            <div className="settings-form">
              <div className="settings-section">
                <div className="settings-section-header">
                  <Globe />
                  <h3>System Information</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Tag size={16} />
                        System Name
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.general?.system_name?.value || ''}
                        onChange={(e) => handleSettingChange('general', 'system_name', e.target.value)}
                        placeholder="Nexus Support"
                      />
                      <small className="form-help">Display name for your helpdesk system</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <FileText size={16} />
                        System Title
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.general?.system_title?.value || ''}
                        onChange={(e) => handleSettingChange('general', 'system_title', e.target.value)}
                        placeholder="IT Helpdesk"
                      />
                      <small className="form-help">Browser tab title</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <User size={16} />
                        Company Name
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.general?.company_name?.value || ''}
                        onChange={(e) => handleSettingChange('general', 'company_name', e.target.value)}
                        placeholder="Your Company"
                      />
                      <small className="form-help">Your organization name</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Globe size={16} />
                        Timezone
                      </label>
                      <select
                        className="form-select"
                        value={settings.general?.timezone?.value || 'Asia/Kolkata'}
                        onChange={(e) => handleSettingChange('general', 'timezone', e.target.value)}
                      >
                        <option value="Asia/Kolkata">Asia/Kolkata (IST)</option>
                        <option value="America/New_York">America/New_York (EST)</option>
                        <option value="Europe/London">Europe/London (GMT)</option>
                        <option value="Asia/Tokyo">Asia/Tokyo (JST)</option>
                      </select>
                      <small className="form-help">System timezone</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Calendar size={16} />
                        Date Format
                      </label>
                      <select
                        className="form-select"
                        value={settings.general?.date_format?.value || 'DD/MM/YYYY'}
                        onChange={(e) => handleSettingChange('general', 'date_format', e.target.value)}
                      >
                        <option value="DD/MM/YYYY">DD/MM/YYYY</option>
                        <option value="MM/DD/YYYY">MM/DD/YYYY</option>
                        <option value="YYYY-MM-DD">YYYY-MM-DD</option>
                      </select>
                      <small className="form-help">Date display format</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Clock size={16} />
                        Time Format
                      </label>
                      <select
                        className="form-select"
                        value={settings.general?.time_format?.value || '24'}
                        onChange={(e) => handleSettingChange('general', 'time_format', e.target.value)}
                      >
                        <option value="12">12 Hour</option>
                        <option value="24">24 Hour</option>
                      </select>
                      <small className="form-help">Time display format</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Maintenance Mode Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <AlertTriangle />
                  <h3>Maintenance Mode</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable Maintenance Mode
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.general?.maintenance_mode?.value || 'false')}
                        onChange={(e) => handleSettingChange('general', 'maintenance_mode', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Put system in maintenance mode</small>
                    </div>

                    <div className="form-group" style={{ gridColumn: '1 / -1' }}>
                      <label className="form-label">
                        <MessageSquare size={16} />
                        Maintenance Message
                      </label>
                      <textarea
                        className="form-textarea"
                        value={settings.general?.maintenance_message?.value || ''}
                        onChange={(e) => handleSettingChange('general', 'maintenance_message', e.target.value)}
                        placeholder="System is under maintenance..."
                        rows="3"
                        disabled={String(settings.general?.maintenance_mode?.value) !== 'true'}
                      />
                      <small className="form-help">Message shown during maintenance</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Announcement Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Bell />
                  <h3>System Announcement</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Bell size={16} />
                        Enable Announcement
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.general?.announcement_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('general', 'announcement_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Show announcement banner on dashboard</small>
                    </div>

                    <div className="form-group" style={{ gridColumn: '1 / -1' }}>
                      <label className="form-label">
                        <MessageSquare size={16} />
                        Announcement Text
                      </label>
                      <textarea
                        className="form-textarea"
                        value={settings.general?.system_announcement?.value || ''}
                        onChange={(e) => handleSettingChange('general', 'system_announcement', e.target.value)}
                        placeholder="Enter announcement message..."
                        rows="3"
                        disabled={String(settings.general?.announcement_enabled?.value) !== 'true'}
                      />
                      <small className="form-help">Message to display on the dashboard</small>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* EMAIL & SMTP TAB */}
          {activeTab === 'email' && (
            <div className="settings-form">
              <div className="settings-section">
                <div className="settings-section-header">
                  <Mail />
                  <h3>SMTP Configuration</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable SMTP
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.email?.smtp_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('email', 'smtp_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Enable email sending functionality</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Mail size={16} />
                        SMTP Host
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.email?.smtp_host?.value || ''}
                        onChange={(e) => handleSettingChange('email', 'smtp_host', e.target.value)}
                        placeholder="smtp.gmail.com"
                      />
                      <small className="form-help">Your SMTP server address</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Tag size={16} />
                        SMTP Port
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.email?.smtp_port?.value || ''}
                        onChange={(e) => handleSettingChange('email', 'smtp_port', e.target.value)}
                        placeholder="587"
                      />
                      <small className="form-help">SMTP port (usually 587 or 465)</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Shield size={16} />
                        SMTP Encryption
                      </label>
                      <select
                        className="form-select"
                        value={settings.email?.smtp_encryption?.value || 'tls'}
                        onChange={(e) => handleSettingChange('email', 'smtp_encryption', e.target.value)}
                      >
                        <option value="tls">TLS</option>
                        <option value="ssl">SSL</option>
                        <option value="none">None</option>
                      </select>
                      <small className="form-help">Encryption type</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <User size={16} />
                        SMTP Username
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.email?.smtp_username?.value || ''}
                        onChange={(e) => handleSettingChange('email', 'smtp_username', e.target.value)}
                        placeholder="your-email@gmail.com"
                      />
                      <small className="form-help">SMTP authentication username</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Lock size={16} />
                        SMTP Password
                      </label>
                      <div style={{ position: 'relative' }}>
                        <input
                          type={showPassword ? 'text' : 'password'}
                          className="form-input"
                          value={settings.email?.smtp_password?.value || ''}
                          onChange={(e) => handleSettingChange('email', 'smtp_password', e.target.value)}
                          placeholder="••••••••"
                          style={{ paddingRight: '40px' }}
                        />
                        <button
                          type="button"
                          onClick={() => setShowPassword(!showPassword)}
                          style={{
                            position: 'absolute',
                            right: '10px',
                            top: '50%',
                            transform: 'translateY(-50%)',
                            background: 'transparent',
                            border: 'none',
                            cursor: 'pointer',
                            color: '#64748b'
                          }}
                        >
                          {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
                        </button>
                      </div>
                      <small className="form-help">SMTP authentication password</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Mail size={16} />
                        From Email Address
                      </label>
                      <input
                        type="email"
                        className="form-input"
                        value={settings.email?.email_from_address?.value || ''}
                        onChange={(e) => handleSettingChange('email', 'email_from_address', e.target.value)}
                        placeholder="noreply@yourcompany.com"
                      />
                      <small className="form-help">Email address shown in "From" field</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <User size={16} />
                        From Name
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.email?.email_from_name?.value || ''}
                        onChange={(e) => handleSettingChange('email', 'email_from_name', e.target.value)}
                        placeholder="IT Helpdesk"
                      />
                      <small className="form-help">Name shown in "From" field</small>
                    </div>
                  </div>

                  {/* Test Connection Button */}
                  <div style={{ marginTop: '20px', display: 'flex', gap: '12px', alignItems: 'center' }}>
                    <button
                      className="btn-secondary"
                      onClick={handleTestSMTP}
                      disabled={testing || String(settings.email?.smtp_enabled?.value) !== 'true'}
                    >
                      {testing ? (
                        <>
                          <Loader size={18} className="spinner" />
                          Testing...
                        </>
                      ) : (
                        <>
                          <Send size={18} />
                          Test Connection
                        </>
                      )}
                    </button>

                    {testResult && (
                      <div style={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: '8px',
                        padding: '8px 16px',
                        borderRadius: '6px',
                        backgroundColor: testResult.success ? '#d1fae5' : '#fee2e2',
                        color: testResult.success ? '#065f46' : '#991b1b',
                        fontSize: '14px'
                      }}>
                        {testResult.success ? <CheckCircle size={16} /> : <AlertCircle size={16} />}
                        <span>{testResult.message}</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Email Notifications Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Bell />
                  <h3>Email Notifications</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable Email Notifications
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.email_notifications_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'email_notifications_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Master switch for all email notifications</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Ticket size={16} />
                        Ticket Created
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notify_on_ticket_created?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notify_on_ticket_created', e.target.value)}
                        disabled={String(settings.notification?.email_notifications_enabled?.value) !== 'true'}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Notify admins when new ticket is created</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <User size={16} />
                        Ticket Assigned
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notify_on_ticket_assigned?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notify_on_ticket_assigned', e.target.value)}
                        disabled={String(settings.notification?.email_notifications_enabled?.value) !== 'true'}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Notify engineer when ticket is assigned</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <RefreshCw size={16} />
                        Ticket Updated
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notify_on_ticket_updated?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notify_on_ticket_updated', e.target.value)}
                        disabled={String(settings.notification?.email_notifications_enabled?.value) !== 'true'}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Notify when ticket status changes</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <MessageSquare size={16} />
                        Comment Added
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notify_on_ticket_commented?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notify_on_ticket_commented', e.target.value)}
                        disabled={String(settings.notification?.email_notifications_enabled?.value) !== 'true'}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Notify when comment is added</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Send Test Email Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Send />
                  <h3>Send Test Email</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Mail size={16} />
                        Test Email Address
                      </label>
                      <input
                        type="email"
                        className="form-input"
                        value={testEmail}
                        onChange={(e) => setTestEmail(e.target.value)}
                        placeholder="your-email@example.com"
                      />
                      <small className="form-help">Enter email address to receive test email</small>
                    </div>
                  </div>

                  <div style={{ marginTop: '16px' }}>
                    <button
                      className="btn-primary"
                      onClick={handleSendTestEmail}
                      disabled={sendingTestEmail || !testEmail || String(settings.email?.smtp_enabled?.value) !== 'true'}
                    >
                      {sendingTestEmail ? (
                        <>
                          <Loader size={18} className="spinner" />
                          Sending...
                        </>
                      ) : (
                        <>
                          <Send size={18} />
                          Send Test Email
                        </>
                      )}
                    </button>
                  </div>
                </div>
              </div>

              {/* Email Management Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <ListOrdered />
                  <h3>Email Management</h3>
                </div>
                <div className="settings-section-content">
                  <p style={{ color: '#64748b', marginBottom: '16px' }}>
                    Manage email queue and templates
                  </p>
                  <div style={{ display: 'flex', gap: '12px' }}>
                    <button
                      className="btn-secondary"
                      onClick={handleViewEmailQueue}
                    >
                      <ListOrdered size={18} />
                      View Email Queue
                    </button>
                    <button
                      className="btn-secondary"
                      onClick={handleViewEmailTemplates}
                    >
                      <Mail size={18} />
                      Manage Templates
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* TICKETS TAB */}
          {activeTab === 'ticket' && (
            <div className="settings-form">
              {/* Ticket Numbering Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Tag />
                  <h3>Ticket Numbering</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Tag size={16} />
                        Ticket Number Prefix
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.ticket?.ticket_number_prefix?.value || ''}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_number_prefix', e.target.value)}
                        placeholder="TKT"
                        maxLength="10"
                      />
                      <small className="form-help">Prefix for ticket numbers (e.g., TKT-001)</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Default Values Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Ticket />
                  <h3>Default Values</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <AlertTriangle size={16} />
                        Default Priority
                      </label>
                      <select
                        className="form-select"
                        value={settings.ticket?.ticket_default_priority?.value || '3'}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_default_priority', e.target.value)}
                        disabled={loadingLookups}
                      >
                        {priorities.map(priority => (
                          <option key={priority.priority_id} value={priority.priority_id}>
                            {priority.priority_name}
                          </option>
                        ))}
                      </select>
                      <small className="form-help">Default priority for new tickets</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Tag size={16} />
                        Default Category
                      </label>
                      <select
                        className="form-select"
                        value={settings.ticket?.ticket_default_category?.value || '9'}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_default_category', e.target.value)}
                        disabled={loadingLookups}
                      >
                        {categories.map(category => (
                          <option key={category.category_id} value={category.category_id}>
                            {category.category_name}
                          </option>
                        ))}
                      </select>
                      <small className="form-help">Default category for new tickets</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Auto-Assignment Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <User />
                  <h3>Auto-Assignment</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable Auto-Assignment
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.ticket?.ticket_auto_assignment?.value || 'false')}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_auto_assignment', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Automatically assign tickets to engineers</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Zap size={16} />
                        Assignment Method
                      </label>
                      <select
                        className="form-select"
                        value={settings.ticket?.ticket_assignment_method?.value || 'round_robin'}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_assignment_method', e.target.value)}
                        disabled={String(settings.ticket?.ticket_auto_assignment?.value) !== 'true'}
                      >
                        <option value="round_robin">Round Robin</option>
                        <option value="load_balanced">Load Balanced</option>
                        <option value="department">Department Based</option>
                      </select>
                      <small className="form-help">How tickets are distributed to engineers</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Auto-Escalation Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <AlertTriangle />
                  <h3>Auto-Escalation</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable Auto-Escalation
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.ticket?.ticket_auto_escalate?.value || 'false')}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_auto_escalate', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Automatically escalate unresolved tickets</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Clock size={16} />
                        Escalation Threshold (Hours)
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.ticket?.ticket_escalate_hours?.value || '24'}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_escalate_hours', e.target.value)}
                        min="1"
                        max="168"
                        disabled={String(settings.ticket?.ticket_auto_escalate?.value) !== 'true'}
                      />
                      <small className="form-help">Hours before escalating unresolved tickets</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Auto-Close & Permissions Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Lock />
                  <h3>Ticket Lifecycle & Permissions</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    {/* ✅ Enable Auto-Close Toggle */}
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable Auto-Close
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.ticket?.ticket_auto_close_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_auto_close_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Automatically close resolved tickets after specified days</small>
                    </div>

                    {/* Auto-Close Days */}
                    <div className="form-group">
                      <label className="form-label">
                        <Calendar size={16} />
                        Auto-Close After (Days)
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.ticket?.ticket_auto_close_days?.value || '30'}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_auto_close_days', e.target.value)}
                        min="1"
                        max="365"
                        disabled={String(settings.ticket?.ticket_auto_close_enabled?.value) !== 'true'}
                      />
                      <small className="form-help">Days to wait before auto-closing resolved tickets</small>
                    </div>

                    {/* Allow User Close */}
                    <div className="form-group">
                      <label className="form-label">
                        <User size={16} />
                        Allow Users to Close Tickets
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.ticket?.ticket_allow_user_close?.value || 'false')}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_allow_user_close', e.target.value)}
                      >
                        <option value="true">Allowed</option>
                        <option value="false">Not Allowed</option>
                      </select>
                      <small className="form-help">Let users close their own tickets</small>
                    </div>

                    {/* Require Approval to Close */}
                    <div className="form-group">
                      <label className="form-label">
                        <Shield size={16} />
                        Require Manager Approval to Close
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.ticket?.ticket_require_approval_close?.value || 'false')}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_require_approval_close', e.target.value)}
                      >
                        <option value="true">Required</option>
                        <option value="false">Not Required</option>
                      </select>
                      <small className="form-help">Require manager approval before closing tickets</small>
                    </div>
                  </div>

                  {/* Info Box */}
                  <div style={{ 
                    marginTop: '20px',
                    padding: '14px 18px',
                    backgroundColor: '#f0f9ff',
                    border: '1px solid #bae6fd',
                    borderRadius: '8px',
                    display: 'flex',
                    gap: '12px',
                    alignItems: 'flex-start'
                  }}>
                    <HelpCircle size={18} style={{ color: '#0369a1', flexShrink: 0, marginTop: '2px' }} />
                    <div>
                      <p style={{ 
                        fontSize: '13px',
                        color: '#0369a1',
                        margin: 0,
                        lineHeight: '1.6',
                        fontWeight: '500'
                      }}>
                        <strong>💡 Quick Tip:</strong> Enable auto-close above to activate the background job. 
                        The auto-close job runs daily at midnight and closes resolved tickets that have exceeded 
                        the specified threshold days.
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Job Status Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Zap />
                  <h3>Background Jobs Status</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    {/* Auto-Escalation Job Status */}
                    <div className="form-group">
                      <label className="form-label">
                        <AlertCircle size={16} />
                        Auto-Escalation Job
                      </label>
                      <div style={{ 
                        padding: '12px 16px', 
                        backgroundColor: String(settings.ticket?.ticket_auto_escalate?.value) === 'true' ? '#dcfce7' : '#fee2e2',
                        border: `1px solid ${String(settings.ticket?.ticket_auto_escalate?.value) === 'true' ? '#86efac' : '#fca5a5'}`,
                        borderRadius: '8px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '10px',
                        marginTop: '8px'
                      }}>
                        <div style={{
                          width: '10px',
                          height: '10px',
                          borderRadius: '50%',
                          backgroundColor: String(settings.ticket?.ticket_auto_escalate?.value) === 'true' ? '#22c55e' : '#ef4444',
                          flexShrink: 0
                        }} />
                        <span style={{ 
                          fontSize: '14px',
                          fontWeight: '600',
                          color: String(settings.ticket?.ticket_auto_escalate?.value) === 'true' ? '#166534' : '#991b1b'
                        }}>
                          {String(settings.ticket?.ticket_auto_escalate?.value) === 'true' ? 'Active - Running hourly' : 'Inactive'}
                        </span>
                      </div>
                      <small className="form-help">Background job that escalates overdue tickets</small>
                    </div>

                    {/* Auto-Close Job Status */}
                    <div className="form-group">
                      <label className="form-label">
                        <Lock size={16} />
                        Auto-Close Job
                      </label>
                      <div style={{ 
                        padding: '12px 16px', 
                        backgroundColor: String(settings.ticket?.ticket_auto_close_enabled?.value) === 'true' ? '#dcfce7' : '#fee2e2',
                        border: `1px solid ${String(settings.ticket?.ticket_auto_close_enabled?.value) === 'true' ? '#86efac' : '#fca5a5'}`,
                        borderRadius: '8px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '10px',
                        marginTop: '8px'
                      }}>
                        <div style={{
                          width: '10px',
                          height: '10px',
                          borderRadius: '50%',
                          backgroundColor: String(settings.ticket?.ticket_auto_close_enabled?.value) === 'true' ? '#22c55e' : '#ef4444',
                          flexShrink: 0
                        }} />
                        <span style={{ 
                          fontSize: '14px',
                          fontWeight: '600',
                          color: String(settings.ticket?.ticket_auto_close_enabled?.value) === 'true' ? '#166534' : '#991b1b'
                        }}>
                          {String(settings.ticket?.ticket_auto_close_enabled?.value) === 'true' ? 'Active - Running daily' : 'Inactive'}
                        </span>
                      </div>
                      <small className="form-help">Background job that auto-closes old resolved tickets</small>
                    </div>

                    {/* Email Processor Job Status */}
                    <div className="form-group">
                      <label className="form-label">
                        <Mail size={16} />
                        Email Processor Job
                      </label>
                      <div style={{ 
                        padding: '12px 16px', 
                        backgroundColor: String(settings.email?.smtp_enabled?.value) === 'true' ? '#dcfce7' : '#fee2e2',
                        border: `1px solid ${String(settings.email?.smtp_enabled?.value) === 'true' ? '#86efac' : '#fca5a5'}`,
                        borderRadius: '8px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '10px',
                        marginTop: '8px'
                      }}>
                        <div style={{
                          width: '10px',
                          height: '10px',
                          borderRadius: '50%',
                          backgroundColor: String(settings.email?.smtp_enabled?.value) === 'true' ? '#22c55e' : '#ef4444',
                          flexShrink: 0
                        }} />
                        <span style={{ 
                          fontSize: '14px',
                          fontWeight: '600',
                          color: String(settings.email?.smtp_enabled?.value) === 'true' ? '#166534' : '#991b1b'
                        }}>
                          {String(settings.email?.smtp_enabled?.value) === 'true' ? 'Active - Running every 5 minutes' : 'Inactive'}
                        </span>
                      </div>
                      <small className="form-help">Background job that sends queued emails</small>
                    </div>
                  </div>

                  {/* Info Box */}
                  <div style={{ 
                    marginTop: '20px',
                    padding: '14px 18px',
                    backgroundColor: '#f0f9ff',
                    border: '1px solid #bae6fd',
                    borderRadius: '8px',
                    display: 'flex',
                    gap: '12px',
                    alignItems: 'flex-start'
                  }}>
                    <HelpCircle size={18} style={{ color: '#0369a1', flexShrink: 0, marginTop: '2px' }} />
                    <div>
                      <p style={{ 
                        fontSize: '13px',
                        color: '#0369a1',
                        margin: 0,
                        lineHeight: '1.6',
                        fontWeight: '500'
                      }}>
                        <strong>💡 Quick Tip:</strong> Changes to background job settings apply immediately without requiring a server restart. Jobs check settings before each execution.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* SLA TAB */}
          {activeTab === 'sla' && (
            <div className="settings-form">

              {/* SLA MONITORING JOB CONTROL */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Zap />
                  <h3>🚨 SLA Background Job Control</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group" style={{ gridColumn: '1 / -1' }}>
                      <label className="form-label">
                        <Power size={16} />
                        Enable SLA Monitoring Job
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.sla?.sla_monitoring_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('sla', 'sla_monitoring_enabled', e.target.value)}
                        style={{
                          borderColor: String(settings.sla?.sla_monitoring_enabled?.value) === 'true' ? '#10b981' : '#ef4444',
                          borderWidth: '2px'
                        }}
                      >
                        <option value="true">✅ Enabled - Job Runs Every 15 Minutes</option>
                        <option value="false">❌ Disabled - Job Will Not Run</option>
                      </select>
                      <small className="form-help">
                        {String(settings.sla?.sla_monitoring_enabled?.value) === 'true' 
                          ? '✅ SLA breach detection job is ACTIVE' 
                          : '❌ SLA breach detection job is STOPPED'}
                      </small>
                    </div>
                  </div>
                  <div style={{ marginTop: '16px', padding: '14px 18px', backgroundColor: String(settings.sla?.sla_monitoring_enabled?.value) === 'true' ? '#f0fdf4' : '#fef2f2', border: '1px solid ' + (String(settings.sla?.sla_monitoring_enabled?.value) === 'true' ? '#86efac' : '#fecaca'), borderRadius: '8px', display: 'flex', gap: '12px', alignItems: 'flex-start' }}>
                    <AlertTriangle size={18} style={{ color: String(settings.sla?.sla_monitoring_enabled?.value) === 'true' ? '#16a34a' : '#dc2626', flexShrink: 0, marginTop: '2px' }} />
                    <div><p style={{ fontSize: '13px', color: String(settings.sla?.sla_monitoring_enabled?.value) === 'true' ? '#16a34a' : '#dc2626', margin: 0, lineHeight: '1.6', fontWeight: '500' }}><strong>⚠️ Important:</strong> Controls background job monitoring. Changes take effect in 15 minutes.</p></div>
                  </div>
                </div>
              </div>
              <div className="settings-section">
                <div className="settings-section-header">
                  <Clock />
                  <h3>SLA Configuration</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable SLA Tracking
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.sla?.sla_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('sla', 'sla_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Enable Service Level Agreement tracking</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Clock size={16} />
                        Business Hours Start
                      </label>
                      <input
                        type="time"
                        className="form-input"
                        value={settings.sla?.sla_business_hours_start?.value || '09:00'}
                        onChange={(e) => handleSettingChange('sla', 'sla_business_hours_start', e.target.value)}
                      />
                      <small className="form-help">Start of business hours</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Clock size={16} />
                        Business Hours End
                      </label>
                      <input
                        type="time"
                        className="form-input"
                        value={settings.sla?.sla_business_hours_end?.value || '17:00'}
                        onChange={(e) => handleSettingChange('sla', 'sla_business_hours_end', e.target.value)}
                      />
                      <small className="form-help">End of business hours</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Calendar size={16} />
                        Working Days
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.sla?.sla_working_days?.value || ''}
                        onChange={(e) => handleSettingChange('sla', 'sla_working_days', e.target.value)}
                        placeholder="mon,tue,wed,thu,fri"
                      />
                      <small className="form-help">Comma-separated working days</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <AlertTriangle size={16} />
                        SLA Warning Threshold (%)
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.sla?.sla_warning_threshold?.value || '80'}
                        onChange={(e) => handleSettingChange('sla', 'sla_warning_threshold', e.target.value)}
                        min="1"
                        max="100"
                      />
                      <small className="form-help">Warning at X% of SLA time</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Bell size={16} />
                        Notify Manager on Breach
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.sla?.sla_breach_notify_manager?.value || 'false')}
                        onChange={(e) => handleSettingChange('sla', 'sla_breach_notify_manager', e.target.value)}
                      >
                        <option value="true">Yes</option>
                        <option value="false">No</option>
                      </select>
                      <small className="form-help">Notify managers on SLA breach</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Zap size={16} />
                        Auto-Escalate on Breach
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.sla?.sla_breach_auto_escalate?.value || 'false')}
                        onChange={(e) => handleSettingChange('sla', 'sla_breach_auto_escalate', e.target.value)}
                      >
                        <option value="true">Yes</option>
                        <option value="false">No</option>
                      </select>
                      <small className="form-help">Automatically escalate on SLA breach</small>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* SECURITY TAB */}
          {activeTab === 'security' && (
            <div className="settings-form">
              {/* Password Policy Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Lock />
                  <h3>Password Policy</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Lock size={16} />
                        Minimum Password Length
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.security?.password_min_length?.value || '8'}
                        onChange={(e) => handleSettingChange('security', 'password_min_length', e.target.value)}
                        min="6"
                        max="20"
                      />
                      <small className="form-help">Minimum characters required</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Shield size={16} />
                        Require Uppercase Letter
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.security?.password_require_uppercase?.value || 'false')}
                        onChange={(e) => handleSettingChange('security', 'password_require_uppercase', e.target.value)}
                      >
                        <option value="true">Required</option>
                        <option value="false">Optional</option>
                      </select>
                      <small className="form-help">Require at least one uppercase letter</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Shield size={16} />
                        Require Lowercase Letter
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.security?.password_require_lowercase?.value || 'false')}
                        onChange={(e) => handleSettingChange('security', 'password_require_lowercase', e.target.value)}
                      >
                        <option value="true">Required</option>
                        <option value="false">Optional</option>
                      </select>
                      <small className="form-help">Require at least one lowercase letter</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Shield size={16} />
                        Require Number
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.security?.password_require_number?.value || 'false')}
                        onChange={(e) => handleSettingChange('security', 'password_require_number', e.target.value)}
                      >
                        <option value="true">Required</option>
                        <option value="false">Optional</option>
                      </select>
                      <small className="form-help">Require at least one number</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Shield size={16} />
                        Require Special Character
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.security?.password_require_special?.value || 'false')}
                        onChange={(e) => handleSettingChange('security', 'password_require_special', e.target.value)}
                      >
                        <option value="true">Required</option>
                        <option value="false">Optional</option>
                      </select>
                      <small className="form-help">Require at least one special character</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Clock size={16} />
                        Password Expiry (Days)
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.security?.password_expiry_days?.value || '90'}
                        onChange={(e) => handleSettingChange('security', 'password_expiry_days', e.target.value)}
                        min="0"
                      />
                      <small className="form-help">Days before password expires (0 = never)</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <ListOrdered size={16} />
                        Password History Count
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.security?.password_history_count?.value || '5'}
                        onChange={(e) => handleSettingChange('security', 'password_history_count', e.target.value)}
                        min="0"
                        max="10"
                      />
                      <small className="form-help">Prevent reuse of last X passwords</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Session Management Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <User />
                  <h3>Session Management</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Clock size={16} />
                        Session Timeout (Minutes)
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.security?.session_timeout_minutes?.value || '480'}
                        onChange={(e) => handleSettingChange('security', 'session_timeout_minutes', e.target.value)}
                        min="30"
                      />
                      <small className="form-help">Inactivity timeout in minutes</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Auto Logout on Inactivity
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.security?.session_auto_logout?.value || 'false')}
                        onChange={(e) => handleSettingChange('security', 'session_auto_logout', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Automatically logout inactive users</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <User size={16} />
                        Max Concurrent Sessions
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.security?.max_concurrent_sessions?.value || '3'}
                        onChange={(e) => handleSettingChange('security', 'max_concurrent_sessions', e.target.value)}
                        min="1"
                        max="10"
                      />
                      <small className="form-help">Maximum sessions per user</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Account Security Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Shield />
                  <h3>Account Security</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <AlertTriangle size={16} />
                        Lockout After Failed Attempts
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.security?.lockout_attempts?.value || '5'}
                        onChange={(e) => handleSettingChange('security', 'lockout_attempts', e.target.value)}
                        min="3"
                        max="10"
                      />
                      <small className="form-help">Account locks after X failed login attempts</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Clock size={16} />
                        Lockout Duration (Minutes)
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.security?.lockout_duration_minutes?.value || '30'}
                        onChange={(e) => handleSettingChange('security', 'lockout_duration_minutes', e.target.value)}
                        min="5"
                      />
                      <small className="form-help">Account locked for X minutes</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Shield size={16} />
                        Two-Factor Authentication
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.security?.two_factor_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('security', 'two_factor_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Require 2FA for all users</small>
                    </div>

                    <div className="form-group" style={{ gridColumn: '1 / -1' }}>
                      <label className="form-label">
                        <Globe size={16} />
                        IP Whitelist
                      </label>
                      <textarea
                        className="form-textarea"
                        value={settings.security?.ip_whitelist?.value || ''}
                        onChange={(e) => handleSettingChange('security', 'ip_whitelist', e.target.value)}
                        placeholder="192.168.1.1, 10.0.0.1"
                        rows="3"
                      />
                      <small className="form-help">Comma-separated IP addresses (leave empty to allow all)</small>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* NOTIFICATIONS TAB */}
          {activeTab === 'notifications' && (
            <div className="settings-form">
              <div className="settings-section">
                <div className="settings-section-header">
                  <Bell />
                  <h3>In-App Notifications</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable Notifications
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notification_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notification_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Enable in-app notifications</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Bell size={16} />
                        Notification Sound
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notification_sound?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notification_sound', e.target.value)}
                        disabled={String(settings.notification?.notification_enabled?.value) !== 'true'}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Play sound for notifications</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Globe size={16} />
                        Desktop Notifications
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notification_desktop?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notification_desktop', e.target.value)}
                        disabled={String(settings.notification?.notification_enabled?.value) !== 'true'}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Enable desktop/browser notifications</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Ticket size={16} />
                        Notify on Ticket Created
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notification_ticket_created?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notification_ticket_created', e.target.value)}
                        disabled={String(settings.notification?.notification_enabled?.value) !== 'true'}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Notify when new ticket is created</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <User size={16} />
                        Notify on Ticket Assigned
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notification_ticket_assigned?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notification_ticket_assigned', e.target.value)}
                        disabled={String(settings.notification?.notification_enabled?.value) !== 'true'}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Notify when ticket is assigned</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <MessageSquare size={16} />
                        Notify on Comment Added
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notification_ticket_commented?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notification_ticket_commented', e.target.value)}
                        disabled={String(settings.notification?.notification_enabled?.value) !== 'true'}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Notify when comment is added</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <RefreshCw size={16} />
                        Notify on Status Change
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notification_ticket_status_changed?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notification_ticket_status_changed', e.target.value)}
                        disabled={String(settings.notification?.notification_enabled?.value) !== 'true'}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Notify when ticket status changes</small>
                    </div>
                  </div>
                </div>
              
              {/* SLA EMAIL NOTIFICATIONS */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <AlertTriangle />
                  <h3>SLA Email Notifications</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Bell size={16} />
                        Send SLA Warning Emails
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notify_on_sla_warning?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notify_on_sla_warning', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Email assigned engineer at warning threshold</small>
                    </div>
                    <div className="form-group">
                      <label className="form-label">
                        <AlertTriangle size={16} />
                        Send SLA Breach Emails
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notify_on_sla_breach?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notify_on_sla_breach', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Email all stakeholders on breach</small>
                    </div>
                  </div>
                  <div style={{ marginTop: '16px', padding: '14px 18px', backgroundColor: '#f0f9ff', border: '1px solid #bae6fd', borderRadius: '8px', display: 'flex', gap: '12px', alignItems: 'flex-start' }}>
                    <HelpCircle size={18} style={{ color: '#0369a1', flexShrink: 0, marginTop: '2px' }} />
                    <div><p style={{ fontSize: '13px', color: '#0369a1', margin: 0, lineHeight: '1.6', fontWeight: '500' }}><strong>💡 Note:</strong> Only applies when SLA Monitoring Job is enabled in SLA tab.</p></div>
                  </div>
                </div>
              </div>
              </div>
            </div>
          )}

          {/* APPEARANCE TAB */}
          {activeTab === 'appearance' && (
            <div className="settings-form">
              <div className="settings-section">
                <div className="settings-section-header">
                  <Palette />
                  <h3>Theme & Branding</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Palette size={16} />
                        Primary Color
                      </label>
                      <input
                        type="color"
                        className="form-input"
                        value={settings.appearance?.theme_primary_color?.value || '#6366f1'}
                        onChange={(e) => handleSettingChange('appearance', 'theme_primary_color', e.target.value)}
                      />
                      <small className="form-help">Primary brand color</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Palette size={16} />
                        Default Theme Mode
                      </label>
                      <select
                        className="form-select"
                        value={settings.appearance?.theme_default_mode?.value || 'light'}
                        onChange={(e) => handleSettingChange('appearance', 'theme_default_mode', e.target.value)}
                      >
                        <option value="light">Light</option>
                        <option value="dark">Dark</option>
                      </select>
                      <small className="form-help">Default theme for new users</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <FileText size={16} />
                        Logo URL
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.appearance?.logo_url?.value || ''}
                        onChange={(e) => handleSettingChange('appearance', 'logo_url', e.target.value)}
                        placeholder="https://example.com/logo.png"
                      />
                      <small className="form-help">URL to company logo</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <FileText size={16} />
                        Favicon URL
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.appearance?.favicon_url?.value || ''}
                        onChange={(e) => handleSettingChange('appearance', 'favicon_url', e.target.value)}
                        placeholder="https://example.com/favicon.ico"
                      />
                      <small className="form-help">URL to favicon</small>
                    </div>

                    <div className="form-group" style={{ gridColumn: '1 / -1' }}>
                      <label className="form-label">
                        <FileText size={16} />
                        Custom CSS
                      </label>
                      <textarea
                        className="form-textarea"
                        value={settings.appearance?.custom_css?.value || ''}
                        onChange={(e) => handleSettingChange('appearance', 'custom_css', e.target.value)}
                        placeholder="/* Custom CSS code */"
                        rows="8"
                        style={{ fontFamily: 'monospace', fontSize: '13px' }}
                      />
                      <small className="form-help">Custom CSS to override default styles</small>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* BACKUP TAB */}
          {activeTab === 'backup' && (
            <div className="settings-form">
              <div className="settings-section">
                <div className="settings-section-header">
                  <Database />
                  <h3>Backup Configuration</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable Automatic Backups
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.backup?.backup_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('backup', 'backup_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Enable scheduled automatic backups</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Clock size={16} />
                        Backup Frequency
                      </label>
                      <select
                        className="form-select"
                        value={settings.backup?.backup_frequency?.value || 'daily'}
                        onChange={(e) => handleSettingChange('backup', 'backup_frequency', e.target.value)}
                        disabled={String(settings.backup?.backup_enabled?.value) !== 'true'}
                      >
                        <option value="daily">Daily</option>
                        <option value="weekly">Weekly</option>
                        <option value="monthly">Monthly</option>
                      </select>
                      <small className="form-help">How often to create backups</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Clock size={16} />
                        Backup Time
                      </label>
                      <input
                        type="time"
                        className="form-input"
                        value={settings.backup?.backup_time?.value || '02:00'}
                        onChange={(e) => handleSettingChange('backup', 'backup_time', e.target.value)}
                        disabled={String(settings.backup?.backup_enabled?.value) !== 'true'}
                      />
                      <small className="form-help">Time to run backup (24-hour format)</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Calendar size={16} />
                        Retention Period (Days)
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.backup?.backup_retention_days?.value || '30'}
                        onChange={(e) => handleSettingChange('backup', 'backup_retention_days', e.target.value)}
                        min="7"
                        disabled={String(settings.backup?.backup_enabled?.value) !== 'true'}
                      />
                      <small className="form-help">Days to keep backups before deletion</small>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* AUDIT TAB */}
          {activeTab === 'audit' && (
            <div className="settings-form">
              <div className="settings-section">
                <div className="settings-section-header">
                  <FileText />
                  <h3>Audit Logging</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable Audit Logging
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.audit?.audit_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('audit', 'audit_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Track user activities and changes</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Calendar size={16} />
                        Retention Period (Days)
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.audit?.audit_retention_days?.value || '365'}
                        onChange={(e) => handleSettingChange('audit', 'audit_retention_days', e.target.value)}
                        min="30"
                        disabled={String(settings.audit?.audit_enabled?.value) !== 'true'}
                      />
                      <small className="form-help">Days to keep audit logs</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <User size={16} />
                        Log User Logins
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.audit?.audit_log_logins?.value || 'false')}
                        onChange={(e) => handleSettingChange('audit', 'audit_log_logins', e.target.value)}
                        disabled={String(settings.audit?.audit_enabled?.value) !== 'true'}
                      >
                        <option value="true">Yes</option>
                        <option value="false">No</option>
                      </select>
                      <small className="form-help">Log all user login attempts</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <RefreshCw size={16} />
                        Log Data Changes
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.audit?.audit_log_changes?.value || 'false')}
                        onChange={(e) => handleSettingChange('audit', 'audit_log_changes', e.target.value)}
                        disabled={String(settings.audit?.audit_enabled?.value) !== 'true'}
                      >
                        <option value="true">Yes</option>
                        <option value="false">No</option>
                      </select>
                      <small className="form-help">Log all data modifications</small>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* INTEGRATION TAB */}
          {activeTab === 'integration' && (
            <div className="settings-form">
              {/* API Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Link />
                  <h3>API Configuration</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable REST API
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.integration?.api_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('integration', 'api_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Enable external API access</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Link size={16} />
                        Enable Webhooks
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.integration?.webhook_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('integration', 'webhook_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Enable webhook notifications</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Slack Integration */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <MessageSquare />
                  <h3>Slack Integration</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable Slack
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.integration?.slack_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('integration', 'slack_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Send notifications to Slack</small>
                    </div>

                    <div className="form-group" style={{ gridColumn: '1 / -1' }}>
                      <label className="form-label">
                        <Link size={16} />
                        Slack Webhook URL
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.integration?.slack_webhook_url?.value || ''}
                        onChange={(e) => handleSettingChange('integration', 'slack_webhook_url', e.target.value)}
                        placeholder="https://hooks.slack.com/services/..."
                        disabled={String(settings.integration?.slack_enabled?.value) !== 'true'}
                      />
                      <small className="form-help">Your Slack incoming webhook URL</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Teams Integration */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <MessageSquare />
                  <h3>Microsoft Teams Integration</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable Teams
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.integration?.teams_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('integration', 'teams_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Send notifications to Microsoft Teams</small>
                    </div>

                    <div className="form-group" style={{ gridColumn: '1 / -1' }}>
                      <label className="form-label">
                        <Link size={16} />
                        Teams Webhook URL
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.integration?.teams_webhook_url?.value || ''}
                        onChange={(e) => handleSettingChange('integration', 'teams_webhook_url', e.target.value)}
                        placeholder="https://outlook.office.com/webhook/..."
                        disabled={String(settings.integration?.teams_enabled?.value) !== 'true'}
                      />
                      <small className="form-help">Your Teams incoming webhook URL</small>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Settings;