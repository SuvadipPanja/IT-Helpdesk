// ============================================
// SETTINGS PAGE - COMPLETE IMPLEMENTATION
// All 91 settings from database organized in 10 tabs
// UI matches Dashboard/Users/Tickets design perfectly
// UPDATED: Added Auto-Close Enable Toggle Button
// Developed by: Suvadip Panja
// Date: November 01, 2025
// ============================================

import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';
import { 
  Settings as SettingsIcon, 
  Mail, 
  Bell, 
  Shield, 
  Save, 
  RefreshCw, 
  AlertCircle, 
  CheckCircle, 
  Eye, 
  EyeOff, 
  Send,
  Loader,
  Globe,
  Ticket,
  Clock,
  Lock,
  Palette,
  Database,
  FileText,
  Link,
  User,
  Calendar,
  AlertTriangle,
  MessageSquare,
  Zap,
  Tag,
  HelpCircle,
  ListOrdered,
  Power
} from 'lucide-react';
import api from '../../services/api';
import '../../styles/Settings.css';

const Settings = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState('general');
  const [settings, setSettings] = useState({});
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [testing, setTesting] = useState(false);
  const [message, setMessage] = useState({ type: '', text: '' });
  const [showPassword, setShowPassword] = useState(false);
  const [testResult, setTestResult] = useState(null);
  const [testEmail, setTestEmail] = useState('');
  const [sendingTestEmail, setSendingTestEmail] = useState(false);
  // ✅ NEW STATE - For Tickets tab dropdowns
  const [priorities, setPriorities] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loadingLookups, setLoadingLookups] = useState(false);


  // Tab configuration with icons
  const tabs = [
    { id: 'general', label: 'General', icon: Globe },
    { id: 'email', label: 'Email & SMTP', icon: Mail },
    { id: 'ticket', label: 'Tickets', icon: Ticket },
    { id: 'sla', label: 'SLA', icon: Clock },
    { id: 'security', label: 'Security', icon: Shield },
    { id: 'notifications', label: 'Notifications', icon: Bell },
    { id: 'appearance', label: 'Appearance', icon: Palette },
    { id: 'backup', label: 'Backup', icon: Database },
    { id: 'audit', label: 'Audit', icon: FileText },
    { id: 'integration', label: 'Integration', icon: Link },
  ];

  // Fetch settings on mount
  useEffect(() => {
    fetchSettings();
    fetchLookups(); // ✅ Fetch priorities and categories for dropdowns
  }, []);

  // ============================================
  // FETCH LOOKUPS (PRIORITIES & CATEGORIES)
  // ============================================
  const fetchLookups = async () => {
    try {
      setLoadingLookups(true);
      const response = await api.get('/system/lookups/settings');
      
      if (response.data.success) {
        setPriorities(response.data.data.priorities || []);
        setCategories(response.data.data.categories || []);
      }
    } catch (error) {
      console.error('Error fetching lookups:', error);
    } finally {
      setLoadingLookups(false);
    }
  };

  // Fetch all settings
  const fetchSettings = async () => {
    try {
      setLoading(true);
      const response = await api.get('/settings');
      
      if (response.data.success) {
        // Group settings by category
        const grouped = {};
        response.data.data.forEach(setting => {
          const category = setting.setting_category || 'general';
          if (!grouped[category]) {
            grouped[category] = {};
          }
          grouped[category][setting.setting_key] = {
            value: setting.setting_value,
            type: setting.setting_type,
            description: setting.setting_description
          };
        });
        setSettings(grouped);
      }
    } catch (error) {
      console.error('Error fetching settings:', error);
      setMessage({ 
        type: 'error', 
        text: 'Failed to load settings' 
      });
    } finally {
      setLoading(false);
    }
  };

  // Handle setting change
  const handleSettingChange = (category, key, value) => {
    setSettings(prev => ({
      ...prev,
      [category]: {
        ...prev[category],
        [key]: {
          ...prev[category]?.[key],
          value: value
        }
      }
    }));
  };

  // Save settings
  const handleSaveSettings = async () => {
    try {
      setSaving(true);
      setMessage({ type: '', text: '' });

      // Flatten settings for API
      const settingsToSave = {};
      Object.keys(settings).forEach(category => {
        Object.keys(settings[category]).forEach(key => {
          settingsToSave[key] = settings[category][key].value;
        });
      });

      const response = await api.put('/settings/bulk', {
        settings: settingsToSave
      });

      if (response.data.success) {
        setMessage({ 
          type: 'success', 
          text: 'Settings saved successfully!' 
        });
        // Clear message after 3 seconds
        setTimeout(() => {
          setMessage({ type: '', text: '' });
        }, 3000);
      }
    } catch (error) {
      console.error('Error saving settings:', error);
      setMessage({ 
        type: 'error', 
        text: error.response?.data?.message || 'Failed to save settings' 
      });
    } finally {
      setSaving(false);
    }
  };

  // Test SMTP connection
  const handleTestConnection = async () => {
    try {
      setTesting(true);
      setTestResult(null);
      
      const response = await api.post('/settings/test-smtp');
      
      setTestResult({
        success: response.data.success,
        message: response.data.message
      });
    } catch (error) {
      setTestResult({
        success: false,
        message: error.response?.data?.message || 'Connection test failed'
      });
    } finally {
      setTesting(false);
    }
  };

  // Send test email
  const handleSendTestEmail = async () => {
    if (!testEmail || !testEmail.includes('@')) {
      setMessage({ 
        type: 'error', 
        text: 'Please enter a valid email address' 
      });
      return;
    }

    try {
      setSendingTestEmail(true);
      setMessage({ type: '', text: '' });
      
      const response = await api.post('/settings/send-test-email', {
        email: testEmail
      });
      
      if (response.data.success) {
        setMessage({ 
          type: 'success', 
          text: 'Test email sent successfully! Check your inbox.' 
        });
        setTestEmail('');
      }
    } catch (error) {
      setMessage({ 
        type: 'error', 
        text: error.response?.data?.message || 'Failed to send test email' 
      });
    } finally {
      setSendingTestEmail(false);
    }
  };

  // Navigate to Email Queue
  const handleViewEmailQueue = () => {
    navigate('/email-queue');
  };

  // Navigate to Email Templates
  const handleViewEmailTemplates = () => {
    navigate('/email-templates');
  };

  // Check permission
  if (!user?.permissions?.can_manage_system) {
    return (
      <div style={{ padding: '40px', textAlign: 'center' }}>
        <Shield size={48} style={{ color: '#ef4444', marginBottom: '16px' }} />
        <h2 style={{ color: '#1e293b', marginBottom: '8px' }}>Access Denied</h2>
        <p style={{ color: '#64748b' }}>
          You don't have permission to access system settings.
        </p>
      </div>
    );
  }

  if (loading) {
    return (
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        minHeight: '400px' 
      }}>
        <Loader className="spinner" size={32} />
      </div>
    );
  }

  return (
    <div className="settings-page">
      {/* Header */}
      <div className="settings-header">
        <div className="settings-header-left">
          <SettingsIcon size={32} />
          <div>
            <h1>System Settings</h1>
            <p>Configure and manage your helpdesk system</p>
          </div>
        </div>
        <div className="settings-header-actions">
          <button 
            className="btn-secondary" 
            onClick={fetchSettings}
            disabled={loading}
          >
            <RefreshCw size={18} />
            Refresh
          </button>
          <button 
            className="btn-primary" 
            onClick={handleSaveSettings}
            disabled={saving}
          >
            {saving ? (
              <>
                <Loader size={18} className="spinner" />
                Saving...
              </>
            ) : (
              <>
                <Save size={18} />
                Save Changes
              </>
            )}
          </button>
        </div>
      </div>

      {/* Success/Error Message */}
      {message.text && (
        <div className={`alert alert-${message.type}`}>
          {message.type === 'success' ? (
            <CheckCircle size={20} />
          ) : (
            <AlertCircle size={20} />
          )}
          <span>{message.text}</span>
        </div>
      )}

      {/* Main Content */}
      <div className="settings-container">
        {/* Sidebar Tabs */}
        <div className="settings-tabs">
          {tabs.map(tab => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                className={`settings-tab ${activeTab === tab.id ? 'active' : ''}`}
                onClick={() => setActiveTab(tab.id)}
              >
                <Icon size={18} />
                <span>{tab.label}</span>
              </button>
            );
          })}
        </div>

        {/* Tab Content */}
        <div className="settings-content">
          {/* GENERAL TAB */}
          {activeTab === 'general' && (
            <div className="settings-form">
              <div className="settings-section">
                <div className="settings-section-header">
                  <Globe />
                  <h3>System Information</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Tag size={16} />
                        System Name
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.general?.system_name?.value || ''}
                        onChange={(e) => handleSettingChange('general', 'system_name', e.target.value)}
                        placeholder="Nexus Support"
                      />
                      <small className="form-help">Display name for your helpdesk system</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <FileText size={16} />
                        System Title
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.general?.system_title?.value || ''}
                        onChange={(e) => handleSettingChange('general', 'system_title', e.target.value)}
                        placeholder="IT Helpdesk"
                      />
                      <small className="form-help">Browser tab title</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <User size={16} />
                        Company Name
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.general?.company_name?.value || ''}
                        onChange={(e) => handleSettingChange('general', 'company_name', e.target.value)}
                        placeholder="Your Company"
                      />
                      <small className="form-help">Your organization name</small>
                    </div>
                  </div>
                </div>
              </div>

              <div className="settings-section">
                <div className="settings-section-header">
                  <Bell />
                  <h3>System Announcement</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Bell size={16} />
                        Enable Announcement
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.general?.announcement_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('general', 'announcement_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Show announcement banner on dashboard</small>
                    </div>

                    <div className="form-group" style={{ gridColumn: '1 / -1' }}>
                      <label className="form-label">
                        <MessageSquare size={16} />
                        Announcement Text
                      </label>
                      <textarea
                        className="form-textarea"
                        value={settings.general?.system_announcement?.value || ''}
                        onChange={(e) => handleSettingChange('general', 'system_announcement', e.target.value)}
                        placeholder="Enter announcement message..."
                        rows="3"
                        disabled={String(settings.general?.announcement_enabled?.value) !== 'true'}
                      />
                      <small className="form-help">Message to display on the dashboard</small>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* EMAIL & SMTP TAB */}
          {activeTab === 'email' && (
            <div className="settings-form">
              <div className="settings-section">
                <div className="settings-section-header">
                  <Mail />
                  <h3>SMTP Configuration</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable SMTP
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.email?.smtp_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('email', 'smtp_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Enable email sending functionality</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Mail size={16} />
                        SMTP Host
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.email?.smtp_host?.value || ''}
                        onChange={(e) => handleSettingChange('email', 'smtp_host', e.target.value)}
                        placeholder="smtp.gmail.com"
                      />
                      <small className="form-help">Your SMTP server address</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Tag size={16} />
                        SMTP Port
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.email?.smtp_port?.value || ''}
                        onChange={(e) => handleSettingChange('email', 'smtp_port', e.target.value)}
                        placeholder="587"
                      />
                      <small className="form-help">SMTP port (usually 587 or 465)</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Shield size={16} />
                        SMTP Secure
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.email?.smtp_secure?.value || 'false')}
                        onChange={(e) => handleSettingChange('email', 'smtp_secure', e.target.value)}
                      >
                        <option value="true">Yes (TLS)</option>
                        <option value="false">No</option>
                      </select>
                      <small className="form-help">Use TLS encryption</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <User size={16} />
                        SMTP Username
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.email?.smtp_username?.value || ''}
                        onChange={(e) => handleSettingChange('email', 'smtp_username', e.target.value)}
                        placeholder="your-email@gmail.com"
                      />
                      <small className="form-help">SMTP authentication username</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Lock size={16} />
                        SMTP Password
                      </label>
                      <div style={{ position: 'relative' }}>
                        <input
                          type={showPassword ? 'text' : 'password'}
                          className="form-input"
                          value={settings.email?.smtp_password?.value || ''}
                          onChange={(e) => handleSettingChange('email', 'smtp_password', e.target.value)}
                          placeholder="••••••••"
                          style={{ paddingRight: '40px' }}
                        />
                        <button
                          type="button"
                          onClick={() => setShowPassword(!showPassword)}
                          style={{
                            position: 'absolute',
                            right: '10px',
                            top: '50%',
                            transform: 'translateY(-50%)',
                            background: 'transparent',
                            border: 'none',
                            cursor: 'pointer',
                            color: '#64748b'
                          }}
                        >
                          {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
                        </button>
                      </div>
                      <small className="form-help">SMTP authentication password</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Mail size={16} />
                        From Email Address
                      </label>
                      <input
                        type="email"
                        className="form-input"
                        value={settings.email?.email_from_address?.value || ''}
                        onChange={(e) => handleSettingChange('email', 'email_from_address', e.target.value)}
                        placeholder="noreply@yourcompany.com"
                      />
                      <small className="form-help">Email address shown in "From" field</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <User size={16} />
                        From Name
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.email?.email_from_name?.value || ''}
                        onChange={(e) => handleSettingChange('email', 'email_from_name', e.target.value)}
                        placeholder="IT Helpdesk"
                      />
                      <small className="form-help">Name shown in "From" field</small>
                    </div>
                  </div>

                  {/* Test Connection Button */}
                  <div style={{ marginTop: '20px', display: 'flex', gap: '12px', alignItems: 'center' }}>
                    <button
                      className="btn-secondary"
                      onClick={handleTestConnection}
                      disabled={testing || String(settings.email?.smtp_enabled?.value) !== 'true'}
                    >
                      {testing ? (
                        <>
                          <Loader size={18} className="spinner" />
                          Testing...
                        </>
                      ) : (
                        <>
                          <Send size={18} />
                          Test Connection
                        </>
                      )}
                    </button>

                    {testResult && (
                      <div style={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: '8px',
                        padding: '8px 16px',
                        borderRadius: '6px',
                        backgroundColor: testResult.success ? '#d1fae5' : '#fee2e2',
                        color: testResult.success ? '#065f46' : '#991b1b',
                        fontSize: '14px'
                      }}>
                        {testResult.success ? <CheckCircle size={16} /> : <AlertCircle size={16} />}
                        <span>{testResult.message}</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Email Notifications Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Bell />
                  <h3>Email Notifications</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable Email Notifications
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.email_notifications_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'email_notifications_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Master switch for all email notifications</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Ticket size={16} />
                        Ticket Created
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notify_on_ticket_created?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notify_on_ticket_created', e.target.value)}
                        disabled={String(settings.notification?.email_notifications_enabled?.value) !== 'true'}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Notify admins when new ticket is created</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <User size={16} />
                        Ticket Assigned
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notify_on_ticket_assigned?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notify_on_ticket_assigned', e.target.value)}
                        disabled={String(settings.notification?.email_notifications_enabled?.value) !== 'true'}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Notify engineer when ticket is assigned</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <RefreshCw size={16} />
                        Ticket Updated
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notify_on_ticket_updated?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notify_on_ticket_updated', e.target.value)}
                        disabled={String(settings.notification?.email_notifications_enabled?.value) !== 'true'}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Notify when ticket status changes</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <MessageSquare size={16} />
                        Comment Added
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.notification?.notify_on_ticket_commented?.value || 'false')}
                        onChange={(e) => handleSettingChange('notification', 'notify_on_ticket_commented', e.target.value)}
                        disabled={String(settings.notification?.email_notifications_enabled?.value) !== 'true'}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Notify when comment is added</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Send Test Email Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Send />
                  <h3>Send Test Email</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Mail size={16} />
                        Test Email Address
                      </label>
                      <input
                        type="email"
                        className="form-input"
                        value={testEmail}
                        onChange={(e) => setTestEmail(e.target.value)}
                        placeholder="your-email@example.com"
                      />
                      <small className="form-help">Enter email address to receive test email</small>
                    </div>
                  </div>

                  <div style={{ marginTop: '16px' }}>
                    <button
                      className="btn-primary"
                      onClick={handleSendTestEmail}
                      disabled={sendingTestEmail || !testEmail || String(settings.email?.smtp_enabled?.value) !== 'true'}
                    >
                      {sendingTestEmail ? (
                        <>
                          <Loader size={18} className="spinner" />
                          Sending...
                        </>
                      ) : (
                        <>
                          <Send size={18} />
                          Send Test Email
                        </>
                      )}
                    </button>
                  </div>
                </div>
              </div>

              {/* Email Management Section - NEW */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <ListOrdered />
                  <h3>Email Management</h3>
                </div>
                <div className="settings-section-content">
                  <p style={{ color: '#64748b', marginBottom: '16px' }}>
                    Manage email queue and templates
                  </p>
                  <div style={{ display: 'flex', gap: '12px' }}>
                    <button
                      className="btn-secondary"
                      onClick={handleViewEmailQueue}
                    >
                      <ListOrdered size={18} />
                      View Email Queue
                    </button>
                    <button
                      className="btn-secondary"
                      onClick={handleViewEmailTemplates}
                    >
                      <Mail size={18} />
                      Manage Templates
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* TICKETS TAB */}
          {activeTab === 'ticket' && (
            <div className="settings-form">
              {/* Ticket Numbering Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Tag />
                  <h3>Ticket Numbering</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Tag size={16} />
                        Ticket Number Prefix
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        value={settings.ticket?.ticket_number_prefix?.value || ''}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_number_prefix', e.target.value)}
                        placeholder="TKT"
                        maxLength="10"
                      />
                      <small className="form-help">Prefix for ticket numbers (e.g., TKT-001)</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Default Values Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Ticket />
                  <h3>Default Values</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <AlertTriangle size={16} />
                        Default Priority
                      </label>
                      <select
                        className="form-select"
                        value={settings.ticket?.ticket_default_priority?.value || '3'}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_default_priority', e.target.value)}
                        disabled={loadingLookups}
                      >
                        {priorities.map(priority => (
                          <option key={priority.priority_id} value={priority.priority_id}>
                            {priority.priority_name}
                          </option>
                        ))}
                      </select>
                      <small className="form-help">Default priority for new tickets</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Tag size={16} />
                        Default Category
                      </label>
                      <select
                        className="form-select"
                        value={settings.ticket?.ticket_default_category?.value || '9'}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_default_category', e.target.value)}
                        disabled={loadingLookups}
                      >
                        {categories.map(category => (
                          <option key={category.category_id} value={category.category_id}>
                            {category.category_name}
                          </option>
                        ))}
                      </select>
                      <small className="form-help">Default category for new tickets</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Auto-Assignment Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <User />
                  <h3>Auto-Assignment</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable Auto-Assignment
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.ticket?.ticket_auto_assignment?.value || 'false')}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_auto_assignment', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Automatically assign tickets to engineers</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Zap size={16} />
                        Assignment Method
                      </label>
                      <select
                        className="form-select"
                        value={settings.ticket?.ticket_assignment_method?.value || 'round_robin'}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_assignment_method', e.target.value)}
                        disabled={String(settings.ticket?.ticket_auto_assignment?.value) !== 'true'}
                      >
                        <option value="round_robin">Round Robin</option>
                        <option value="load_balanced">Load Balanced</option>
                        <option value="department">Department Based</option>
                      </select>
                      <small className="form-help">How tickets are distributed to engineers</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Auto-Escalation Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <AlertTriangle />
                  <h3>Auto-Escalation</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable Auto-Escalation
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.ticket?.ticket_auto_escalate?.value || 'false')}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_auto_escalate', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Automatically escalate unresolved tickets</small>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        <Clock size={16} />
                        Escalation Threshold (Hours)
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.ticket?.ticket_escalate_hours?.value || '24'}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_escalate_hours', e.target.value)}
                        min="1"
                        max="168"
                        disabled={String(settings.ticket?.ticket_auto_escalate?.value) !== 'true'}
                      />
                      <small className="form-help">Hours before escalating unresolved tickets</small>
                    </div>
                  </div>
                </div>
              </div>

              {/* Auto-Close & Permissions Section - UPDATED WITH TOGGLE */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Lock />
                  <h3>Ticket Lifecycle & Permissions</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    {/* ✅ NEW: Enable Auto-Close Toggle */}
                    <div className="form-group">
                      <label className="form-label">
                        <Power size={16} />
                        Enable Auto-Close
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.ticket?.ticket_auto_close_enabled?.value || 'false')}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_auto_close_enabled', e.target.value)}
                      >
                        <option value="true">Enabled</option>
                        <option value="false">Disabled</option>
                      </select>
                      <small className="form-help">Automatically close resolved tickets after specified days</small>
                    </div>

                    {/* Auto-Close Days - Disabled when auto-close is OFF */}
                    <div className="form-group">
                      <label className="form-label">
                        <Calendar size={16} />
                        Auto-Close After (Days)
                      </label>
                      <input
                        type="number"
                        className="form-input"
                        value={settings.ticket?.ticket_auto_close_days?.value || '30'}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_auto_close_days', e.target.value)}
                        min="1"
                        max="365"
                        disabled={String(settings.ticket?.ticket_auto_close_enabled?.value) !== 'true'}
                      />
                      <small className="form-help">Days to wait before auto-closing resolved tickets</small>
                    </div>

                    {/* Allow User Close */}
                    <div className="form-group">
                      <label className="form-label">
                        <User size={16} />
                        Allow Users to Close Tickets
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.ticket?.ticket_allow_user_close?.value || 'false')}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_allow_user_close', e.target.value)}
                      >
                        <option value="true">Allowed</option>
                        <option value="false">Not Allowed</option>
                      </select>
                      <small className="form-help">Let users close their own tickets</small>
                    </div>

                    {/* Require Approval to Close */}
                    <div className="form-group">
                      <label className="form-label">
                        <Shield size={16} />
                        Require Manager Approval to Close
                      </label>
                      <select
                        className="form-select"
                        value={String(settings.ticket?.ticket_require_approval_close?.value || 'false')}
                        onChange={(e) => handleSettingChange('ticket', 'ticket_require_approval_close', e.target.value)}
                      >
                        <option value="true">Required</option>
                        <option value="false">Not Required</option>
                      </select>
                      <small className="form-help">Require manager approval before closing tickets</small>
                    </div>
                  </div>

                  {/* Info Box for Auto-Close */}
                  <div style={{ 
                    marginTop: '20px',
                    padding: '14px 18px',
                    backgroundColor: '#f0f9ff',
                    border: '1px solid #bae6fd',
                    borderRadius: '8px',
                    display: 'flex',
                    gap: '12px',
                    alignItems: 'flex-start'
                  }}>
                    <HelpCircle size={18} style={{ color: '#0369a1', flexShrink: 0, marginTop: '2px' }} />
                    <div>
                      <p style={{ 
                        fontSize: '13px',
                        color: '#0369a1',
                        margin: 0,
                        lineHeight: '1.6',
                        fontWeight: '500'
                      }}>
                        <strong>💡 Quick Tip:</strong> Enable auto-close above to activate the background job. 
                        The auto-close job runs daily at midnight and closes resolved tickets that have exceeded 
                        the specified threshold days.
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Job Status Section */}
              <div className="settings-section">
                <div className="settings-section-header">
                  <Zap />
                  <h3>Background Jobs Status</h3>
                </div>
                <div className="settings-section-content">
                  <div className="form-grid">
                    {/* Auto-Escalation Job Status */}
                    <div className="form-group">
                      <label className="form-label">
                        <AlertCircle size={16} />
                        Auto-Escalation Job
                      </label>
                      <div style={{ 
                        padding: '12px 16px', 
                        backgroundColor: String(settings.ticket?.ticket_auto_escalate?.value) === 'true' ? '#dcfce7' : '#fee2e2',
                        border: `1px solid ${String(settings.ticket?.ticket_auto_escalate?.value) === 'true' ? '#86efac' : '#fca5a5'}`,
                        borderRadius: '8px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '10px',
                        marginTop: '8px'
                      }}>
                        <div style={{
                          width: '10px',
                          height: '10px',
                          borderRadius: '50%',
                          backgroundColor: String(settings.ticket?.ticket_auto_escalate?.value) === 'true' ? '#22c55e' : '#ef4444',
                          flexShrink: 0
                        }} />
                        <span style={{ 
                          fontSize: '14px',
                          fontWeight: '600',
                          color: String(settings.ticket?.ticket_auto_escalate?.value) === 'true' ? '#166534' : '#991b1b'
                        }}>
                          {String(settings.ticket?.ticket_auto_escalate?.value) === 'true' ? 'Active - Running hourly' : 'Inactive'}
                        </span>
                      </div>
                      <small className="form-help">Background job that escalates overdue tickets</small>
                    </div>

                    {/* Auto-Close Job Status - NEW */}
                    <div className="form-group">
                      <label className="form-label">
                        <Lock size={16} />
                        Auto-Close Job
                      </label>
                      <div style={{ 
                        padding: '12px 16px', 
                        backgroundColor: String(settings.ticket?.ticket_auto_close_enabled?.value) === 'true' ? '#dcfce7' : '#fee2e2',
                        border: `1px solid ${String(settings.ticket?.ticket_auto_close_enabled?.value) === 'true' ? '#86efac' : '#fca5a5'}`,
                        borderRadius: '8px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '10px',
                        marginTop: '8px'
                      }}>
                        <div style={{
                          width: '10px',
                          height: '10px',
                          borderRadius: '50%',
                          backgroundColor: String(settings.ticket?.ticket_auto_close_enabled?.value) === 'true' ? '#22c55e' : '#ef4444',
                          flexShrink: 0
                        }} />
                        <span style={{ 
                          fontSize: '14px',
                          fontWeight: '600',
                          color: String(settings.ticket?.ticket_auto_close_enabled?.value) === 'true' ? '#166534' : '#991b1b'
                        }}>
                          {String(settings.ticket?.ticket_auto_close_enabled?.value) === 'true' ? 'Active - Running daily' : 'Inactive'}
                        </span>
                      </div>
                      <small className="form-help">Background job that auto-closes old resolved tickets</small>
                    </div>

                    {/* Email Processor Job Status */}
                    <div className="form-group">
                      <label className="form-label">
                        <Mail size={16} />
                        Email Processor Job
                      </label>
                      <div style={{ 
                        padding: '12px 16px', 
                        backgroundColor: String(settings.email?.smtp_enabled?.value) === 'true' ? '#dcfce7' : '#fee2e2',
                        border: `1px solid ${String(settings.email?.smtp_enabled?.value) === 'true' ? '#86efac' : '#fca5a5'}`,
                        borderRadius: '8px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '10px',
                        marginTop: '8px'
                      }}>
                        <div style={{
                          width: '10px',
                          height: '10px',
                          borderRadius: '50%',
                          backgroundColor: String(settings.email?.smtp_enabled?.value) === 'true' ? '#22c55e' : '#ef4444',
                          flexShrink: 0
                        }} />
                        <span style={{ 
                          fontSize: '14px',
                          fontWeight: '600',
                          color: String(settings.email?.smtp_enabled?.value) === 'true' ? '#166534' : '#991b1b'
                        }}>
                          {String(settings.email?.smtp_enabled?.value) === 'true' ? 'Active - Running every 5 minutes' : 'Inactive'}
                        </span>
                      </div>
                      <small className="form-help">Background job that sends queued emails</small>
                    </div>
                  </div>

                  {/* Info Box */}
                  <div style={{ 
                    marginTop: '20px',
                    padding: '14px 18px',
                    backgroundColor: '#f0f9ff',
                    border: '1px solid #bae6fd',
                    borderRadius: '8px',
                    display: 'flex',
                    gap: '12px',
                    alignItems: 'flex-start'
                  }}>
                    <HelpCircle size={18} style={{ color: '#0369a1', flexShrink: 0, marginTop: '2px' }} />
                    <div>
                      <p style={{ 
                        fontSize: '13px',
                        color: '#0369a1',
                        margin: 0,
                        lineHeight: '1.6',
                        fontWeight: '500'
                      }}>
                        <strong>💡 Quick Tip:</strong> Enable auto-escalation above to activate the background job. 
                        Changes to threshold hours apply immediately without requiring a server restart.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* SLA TAB */}
          {activeTab === 'sla' && (
            <div className="settings-form">
              <div className="settings-section">
                <div className="settings-section-header">
                  <Clock />
                  <h3>SLA Configuration</h3>
                </div>
                <div className="settings-section-content">
                  <div className="settings-content-placeholder">
                    <div className="placeholder-header">
                      <Clock size={48} style={{ color: '#cbd5e1', marginBottom: '16px' }} />
                      <h3>SLA Settings</h3>
                      <p>Service Level Agreement configuration will be available here</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* SECURITY TAB */}
          {activeTab === 'security' && (
            <div className="settings-form">
              <div className="settings-section">
                <div className="settings-section-header">
                  <Shield />
                  <h3>Security Configuration</h3>
                </div>
                <div className="settings-section-content">
                  <div className="settings-content-placeholder">
                    <div className="placeholder-header">
                      <Shield size={48} style={{ color: '#cbd5e1', marginBottom: '16px' }} />
                      <h3>Security Settings</h3>
                      <p>Password policies and security options will be available here</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* NOTIFICATIONS TAB */}
          {activeTab === 'notifications' && (
            <div className="settings-form">
              <div className="settings-section">
                <div className="settings-section-header">
                  <Bell />
                  <h3>Notification Preferences</h3>
                </div>
                <div className="settings-section-content">
                  <div className="settings-content-placeholder">
                    <div className="placeholder-header">
                      <Bell size={48} style={{ color: '#cbd5e1', marginBottom: '16px' }} />
                      <h3>Notification Settings</h3>
                      <p>In-app notification preferences will be available here</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* APPEARANCE TAB */}
          {activeTab === 'appearance' && (
            <div className="settings-form">
              <div className="settings-section">
                <div className="settings-section-header">
                  <Palette />
                  <h3>Appearance & Branding</h3>
                </div>
                <div className="settings-section-content">
                  <div className="settings-content-placeholder">
                    <div className="placeholder-header">
                      <Palette size={48} style={{ color: '#cbd5e1', marginBottom: '16px' }} />
                      <h3>Appearance Settings</h3>
                      <p>Theme and branding customization will be available here</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* BACKUP TAB */}
          {activeTab === 'backup' && (
            <div className="settings-form">
              <div className="settings-section">
                <div className="settings-section-header">
                  <Database />
                  <h3>Backup & Restore</h3>
                </div>
                <div className="settings-section-content">
                  <div className="settings-content-placeholder">
                    <div className="placeholder-header">
                      <Database size={48} style={{ color: '#cbd5e1', marginBottom: '16px' }} />
                      <h3>Backup Settings</h3>
                      <p>Automated backup configuration will be available here</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* AUDIT TAB */}
          {activeTab === 'audit' && (
            <div className="settings-form">
              <div className="settings-section">
                <div className="settings-section-header">
                  <FileText />
                  <h3>Audit Logging</h3>
                </div>
                <div className="settings-section-content">
                  <div className="settings-content-placeholder">
                    <div className="placeholder-header">
                      <FileText size={48} style={{ color: '#cbd5e1', marginBottom: '16px' }} />
                      <h3>Audit Settings</h3>
                      <p>Audit log configuration will be available here</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* INTEGRATION TAB */}
          {activeTab === 'integration' && (
            <div className="settings-form">
              <div className="settings-section">
                <div className="settings-section-header">
                  <Link />
                  <h3>Third-Party Integrations</h3>
                </div>
                <div className="settings-section-content">
                  <div className="settings-content-placeholder">
                    <div className="placeholder-header">
                      <Link size={48} style={{ color: '#cbd5e1', marginBottom: '16px' }} />
                      <h3>Integration Settings</h3>
                      <p>API and webhook configuration will be available here</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Settings;