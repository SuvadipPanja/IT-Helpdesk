import { useState, useEffect } from 'react';
import { 
  TrendingUp, 
  Ticket, 
  CheckCircle, 
  Clock, 
  Users, 
  Calendar,
  Download,
  Loader,
  AlertTriangle,
  Activity
} from 'lucide-react';
import { 
  PieChart, 
  Pie, 
  Cell, 
  BarChart, 
  Bar, 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer 
} from 'recharts';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { useAuth } from '../../context/AuthContext';
import api from '../../services/api';
import ExportModal from '../../components/analytics/ExportModal';
import '../../styles/Analytics.css';

const Analytics = () => {
  const { user } = useAuth();

  // State management
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [dateRange, setDateRange] = useState('30');
  const [exporting, setExporting] = useState(false);
  const [showExportModal, setShowExportModal] = useState(false);

  // Data states
  const [overview, setOverview] = useState(null);
  const [statusDistribution, setStatusDistribution] = useState([]);
  const [departmentData, setDepartmentData] = useState([]);
  const [priorityData, setPriorityData] = useState([]);
  const [trendsData, setTrendsData] = useState([]);
  const [topEngineers, setTopEngineers] = useState([]);
  const [recentActivity, setRecentActivity] = useState([]);

  // Fetch all analytics data
  const fetchAnalytics = async () => {
    try {
      setLoading(true);
      setError('');

      const [
        overviewRes,
        statusRes,
        deptRes,
        priorityRes,
        trendsRes,
        engineersRes,
        activityRes
      ] = await Promise.all([
        api.get('/analytics/overview'),
        api.get('/analytics/status-distribution'),
        api.get('/analytics/by-department'),
        api.get('/analytics/by-priority'),
        api.get(`/analytics/trends?days=${dateRange}`),
        api.get('/analytics/top-engineers?limit=5'),
        api.get('/analytics/recent-activity?limit=10')
      ]);

      if (overviewRes.data.success) setOverview(overviewRes.data.data);
      if (statusRes.data.success) setStatusDistribution(statusRes.data.data);
      if (deptRes.data.success) setDepartmentData(deptRes.data.data);
      if (priorityRes.data.success) setPriorityData(priorityRes.data.data);
      if (trendsRes.data.success) setTrendsData(trendsRes.data.data);
      if (engineersRes.data.success) setTopEngineers(engineersRes.data.data);
      if (activityRes.data.success) setRecentActivity(activityRes.data.data);

    } catch (err) {
      console.error('Error fetching analytics:', err);
      setError(err.response?.data?.message || 'Failed to fetch analytics data');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAnalytics();
  }, [dateRange]);

  // Chart colors
  const COLORS = ['#6366f1', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#ec4899'];

  // Custom tooltip
  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      return (
        <div className="custom-tooltip">
          <p className="label">{label}</p>
          {payload.map((entry, index) => (
            <p key={index} style={{ color: entry.color }}>
              {entry.name}: {entry.value}
            </p>
          ))}
        </div>
      );
    }
    return null;
  };

  // Export to CSV with Excel formatting - ENHANCED VERSION
  const exportToCSV = () => {
    try {
      setExporting(true);

      // Create workbook-style CSV with formatting instructions
      let csvContent = "\uFEFF"; // UTF-8 BOM for Excel
      
      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      // MAIN HEADER
      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      csvContent += ",,,,,,\n"; // Empty row for spacing
      csvContent += ",,IT HELPDESK ANALYTICS REPORT,,,,\n";
      csvContent += ",,‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê,,,,\n";
      csvContent += ",,Generated On:," + new Date().toLocaleString() + ",,\n";
      csvContent += ",,Report Period:,Last " + dateRange + " Days,,\n";
      csvContent += ",,Generated By:," + (user?.first_name + " " + user?.last_name) + ",,\n";
      csvContent += ",,‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê,,,,\n";
      csvContent += ",,,,,,\n"; // Empty row
      csvContent += ",,,,,,\n"; // Empty row

      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      // SECTION 1: EXECUTIVE SUMMARY
      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      csvContent += "SECTION 1: EXECUTIVE SUMMARY,,,,,\n";
      csvContent += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ,,,,,\n";
      csvContent += "Metric,Value,Status,Target,Performance\n";
      
      const completionRate = overview?.total_tickets > 0 
        ? ((overview.closed_tickets / overview.total_tickets) * 100).toFixed(1) 
        : 0;
      
      csvContent += `Total Tickets,${overview?.total_tickets || 0},üìä Active,-,100%\n`;
      csvContent += `Open Tickets,${overview?.open_tickets || 0},‚ö†Ô∏è In Progress,0,${100 - completionRate}%\n`;
      csvContent += `Closed Tickets,${overview?.closed_tickets || 0},‚úÖ Completed,-,${completionRate}%\n`;
      csvContent += `Average Resolution Time,${overview?.avg_resolution_hours || 0} hours,‚è±Ô∏è Tracked,24h,${overview?.avg_resolution_hours <= 24 ? 'Good' : 'Needs Improvement'}\n`;
      csvContent += `SLA Compliance,${overview?.sla_compliance || 0}%,üéØ Meeting Target,95%,${overview?.sla_compliance >= 95 ? 'Excellent' : overview?.sla_compliance >= 80 ? 'Good' : 'Below Target'}\n`;
      csvContent += `Active Users,${overview?.active_users || 0},üë• Team Members,-,Active\n`;
      csvContent += `Active Departments,${overview?.active_departments || 0},üè¢ Departments,-,Active\n`;
      csvContent += `Tickets This Week,${overview?.tickets_this_week || 0},üìà Trending,-,${overview?.tickets_this_week > 10 ? 'High Volume' : 'Normal'}\n`;
      csvContent += `Tickets This Month,${overview?.tickets_this_month || 0},üìä Monthly Total,-,Tracked\n`;
      csvContent += ",,,,\n"; // Empty row
      csvContent += ",,,,\n"; // Empty row

      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      // SECTION 2: TICKET STATUS BREAKDOWN
      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      csvContent += "SECTION 2: TICKET STATUS BREAKDOWN,,,,,\n";
      csvContent += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ,,,,,\n";
      csvContent += "Status Name,Count,Percentage,Visual Bar,Status\n";
      
      const totalTickets = statusDistribution.reduce((sum, item) => sum + item.count, 0);
      statusDistribution.forEach(item => {
        const percentage = totalTickets > 0 ? ((item.count / totalTickets) * 100).toFixed(1) : 0;
        const barLength = Math.round(percentage / 5); // Each ‚ñà represents 5%
        const visualBar = '‚ñà'.repeat(barLength) + '‚ñë'.repeat(20 - barLength);
        const statusIcon = item.count > 0 ? 'üü¢' : '‚ö™';
        csvContent += `${item.status_name},${item.count},${percentage}%,${visualBar},${statusIcon}\n`;
      });
      
      csvContent += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ,,,,,\n";
      csvContent += `TOTAL TICKETS,${totalTickets},100.0%,‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà,‚úÖ\n`;
      csvContent += ",,,,\n"; // Empty row
      csvContent += ",,,,\n"; // Empty row

      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      // SECTION 3: DEPARTMENT PERFORMANCE ANALYSIS
      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      csvContent += "SECTION 3: DEPARTMENT PERFORMANCE ANALYSIS,,,,,\n";
      csvContent += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ,,,,,\n";
      csvContent += "Department Name,Total Tickets,Open,Closed,Closure Rate %,Performance Grade\n";
      
      departmentData.forEach(dept => {
        const closureRate = dept.total_tickets > 0 
          ? ((dept.closed_tickets / dept.total_tickets) * 100).toFixed(1) 
          : 0;
        const grade = closureRate >= 90 ? 'A+ Excellent' 
                    : closureRate >= 75 ? 'A Good' 
                    : closureRate >= 60 ? 'B Average' 
                    : closureRate >= 40 ? 'C Below Average' 
                    : 'D Needs Improvement';
        const icon = closureRate >= 75 ? 'üèÜ' : closureRate >= 60 ? '‚≠ê' : '‚ö†Ô∏è';
        
        csvContent += `${dept.department_name},${dept.total_tickets},${dept.open_tickets},${dept.closed_tickets},${closureRate}%,${icon} ${grade}\n`;
      });
      
      csvContent += ",,,,\n"; // Empty row
      csvContent += ",,,,\n"; // Empty row

      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      // SECTION 4: PRIORITY DISTRIBUTION
      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      csvContent += "SECTION 4: PRIORITY DISTRIBUTION,,,,,\n";
      csvContent += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ,,,,,\n";
      csvContent += "Priority Level,Count,Percentage,Visual Representation,Alert Status\n";
      
      const totalPriority = priorityData.reduce((sum, item) => sum + item.count, 0);
      priorityData.forEach(item => {
        const percentage = totalPriority > 0 ? ((item.count / totalPriority) * 100).toFixed(1) : 0;
        const barLength = Math.round(percentage / 5);
        const visualBar = '‚ñà'.repeat(barLength) + '‚ñë'.repeat(20 - barLength);
        
        let icon = 'üîµ';
        if (item.priority_name.toLowerCase().includes('critical')) icon = 'üî¥';
        else if (item.priority_name.toLowerCase().includes('high')) icon = 'üü†';
        else if (item.priority_name.toLowerCase().includes('medium')) icon = 'üü°';
        else if (item.priority_name.toLowerCase().includes('low')) icon = 'üü¢';
        
        csvContent += `${item.priority_name},${item.count},${percentage}%,${visualBar},${icon}\n`;
      });
      
      csvContent += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ,,,,,\n";
      csvContent += `TOTAL,${totalPriority},100.0%,‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà,üìä\n`;
      csvContent += ",,,,\n"; // Empty row
      csvContent += ",,,,\n"; // Empty row

      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      // SECTION 5: TOP PERFORMERS LEADERBOARD
      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      csvContent += "SECTION 5: TOP PERFORMERS LEADERBOARD (üèÜ HALL OF FAME),,,,,\n";
      csvContent += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ,,,,,\n";
      csvContent += "Rank,Engineer Name,Role,Total Assigned,Resolved,Resolution Rate %,Avg Time (hrs),Grade\n";
      
      topEngineers.forEach((eng, index) => {
        const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : '‚≠ê';
        const grade = eng.resolution_rate >= 90 ? 'A+ Outstanding' 
                    : eng.resolution_rate >= 80 ? 'A Excellent' 
                    : eng.resolution_rate >= 70 ? 'B+ Good' 
                    : eng.resolution_rate >= 60 ? 'B Average' 
                    : 'C Needs Focus';
        
        csvContent += `${medal} #${index + 1},${eng.engineer_name},${eng.role_name},${eng.total_assigned || 0},${eng.tickets_resolved},${eng.resolution_rate}%,${eng.avg_resolution_hours},${grade}\n`;
      });
      
      csvContent += ",,,,,,\n"; // Empty row
      csvContent += ",,,,,,\n"; // Empty row

      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      // SECTION 6: WEEKLY TRENDS ANALYSIS
      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      csvContent += "SECTION 6: TICKET TRENDS - LAST 7 DAYS SNAPSHOT,,,,,\n";
      csvContent += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ,,,,,\n";
      csvContent += "Date,Created,Closed,Net Change,Trend,Day Performance\n";
      
      const last7Days = trendsData.slice(-7);
      last7Days.forEach(day => {
        const netChange = day.tickets_created - day.tickets_closed;
        const trendIcon = netChange > 0 ? 'üìà Increasing' 
                        : netChange < 0 ? 'üìâ Decreasing' 
                        : '‚û°Ô∏è Stable';
        const performance = day.tickets_closed >= day.tickets_created ? '‚úÖ Good' 
                          : day.tickets_closed >= day.tickets_created * 0.7 ? '‚ö†Ô∏è Fair' 
                          : 'üî¥ Action Needed';
        
        csvContent += `${day.date},${day.tickets_created},${day.tickets_closed},${netChange},${trendIcon},${performance}\n`;
      });
      
      csvContent += ",,,,\n"; // Empty row
      csvContent += ",,,,\n"; // Empty row

      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      // SECTION 7: KEY INSIGHTS & RECOMMENDATIONS
      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      csvContent += "SECTION 7: KEY INSIGHTS & RECOMMENDATIONS,,,,,\n";
      csvContent += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ,,,,,\n";
      csvContent += "Category,Insight,Status,Recommendation\n";
      
      // Calculate insights
      const openRate = overview?.total_tickets > 0 
        ? ((overview.open_tickets / overview.total_tickets) * 100).toFixed(1) 
        : 0;
      
      csvContent += `Ticket Volume,${overview?.total_tickets} total tickets processed,${overview?.total_tickets > 50 ? 'üìä High Volume' : 'üìä Normal Volume'},${overview?.total_tickets > 50 ? 'Consider team expansion' : 'Current capacity sufficient'}\n`;
      csvContent += `Open Tickets,${openRate}% tickets currently open,${openRate > 30 ? '‚ö†Ô∏è High' : '‚úÖ Healthy'},${openRate > 30 ? 'Focus on closing backlog' : 'Maintain current pace'}\n`;
      csvContent += `Response Time,Avg ${overview?.avg_resolution_hours}h resolution time,${overview?.avg_resolution_hours <= 24 ? '‚úÖ Meeting SLA' : '‚ö†Ô∏è Above Target'},${overview?.avg_resolution_hours > 24 ? 'Implement faster triage process' : 'Keep up the good work'}\n`;
      csvContent += `Team Performance,${topEngineers.length} active engineers,${topEngineers.length >= 3 ? '‚úÖ Good Coverage' : '‚ö†Ô∏è Limited Coverage'},${topEngineers.length < 3 ? 'Consider hiring more engineers' : 'Team size is adequate'}\n`;
      csvContent += `SLA Compliance,${overview?.sla_compliance}% compliance rate,${overview?.sla_compliance >= 95 ? 'üèÜ Excellent' : overview?.sla_compliance >= 80 ? '‚úÖ Good' : 'üî¥ Needs Improvement'},${overview?.sla_compliance < 95 ? 'Review and optimize processes' : 'Maintain current standards'}\n`;
      
      csvContent += ",,,,\n"; // Empty row
      csvContent += ",,,,\n"; // Empty row

      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      // FOOTER SECTION
      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      csvContent += ",,,,,,\n";
      csvContent += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê,,,,,\n";
      csvContent += "END OF REPORT,,,,,\n";
      csvContent += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê,,,,,\n";
      csvContent += `Report Generated: ${new Date().toLocaleString()},,,,,\n`;
      csvContent += `Document Version: 1.0,,,,,\n`;
      csvContent += `Classification: INTERNAL USE ONLY - CONFIDENTIAL,,,,,\n`;
      csvContent += `Contact: IT Helpdesk Team,,,,,\n`;
      csvContent += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê,,,,,\n";
      csvContent += ",,,,,,\n";
      csvContent += "üìä Thank you for using IT Helpdesk Analytics System,,,,,\n";
      csvContent += "üîê This report contains confidential information,,,,,\n";
      csvContent += "üìß For questions contact: support@company.com,,,,,\n";
      csvContent += ",,,,,,\n";

      // Create and download file
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `IT_Helpdesk_Analytics_Report_${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      alert('‚úÖ CSV Report Exported Successfully!\n\n' +
            'üìä The report includes:\n' +
            '‚Ä¢ Executive Summary with KPIs\n' +
            '‚Ä¢ Status & Priority Breakdown\n' +
            '‚Ä¢ Department Performance Analysis\n' +
            '‚Ä¢ Top Performers Leaderboard\n' +
            '‚Ä¢ 7-Day Trends Analysis\n' +
            '‚Ä¢ Key Insights & Recommendations\n\n' +
            'üí° Open with Microsoft Excel or Google Sheets for best viewing experience!');
    } catch (error) {
      console.error('Export error:', error);
      alert('‚ùå Failed to export report');
    } finally {
      setExporting(false);
    }
  };

  // Export to PDF - UNCHANGED
  const exportToPDF = () => {
    try {
      setExporting(true);

      const doc = new jsPDF();
      
      doc.setFontSize(20);
      doc.setTextColor(99, 102, 241);
      doc.text('IT Helpdesk Analytics Report', 14, 20);
      
      doc.setFontSize(10);
      doc.setTextColor(100, 100, 100);
      doc.text(`Generated: ${new Date().toLocaleString()}`, 14, 28);
      doc.text(`Period: Last ${dateRange} Days`, 14, 33);
      doc.text(`Generated by: ${user?.first_name} ${user?.last_name}`, 14, 38);

      let yPos = 48;

      doc.setFontSize(14);
      doc.setTextColor(0, 0, 0);
      doc.text('Overview Statistics', 14, yPos);
      yPos += 8;

      autoTable(doc, {
        startY: yPos,
        head: [['Metric', 'Value']],
        body: [
          ['Total Tickets', `${overview?.total_tickets || 0}`],
          ['Open Tickets', `${overview?.open_tickets || 0}`],
          ['Closed Tickets', `${overview?.closed_tickets || 0}`],
          ['Average Resolution Time', `${overview?.avg_resolution_hours || 0} hours`],
          ['SLA Compliance', `${overview?.sla_compliance || 0}%`],
          ['Active Users', `${overview?.active_users || 0}`],
          ['Active Departments', `${overview?.active_departments || 0}`],
        ],
        theme: 'grid',
        headStyles: { fillColor: [99, 102, 241] },
      });

      yPos = doc.lastAutoTable.finalY + 15;

      doc.setFontSize(14);
      doc.text('Ticket Status Distribution', 14, yPos);
      yPos += 8;

      autoTable(doc, {
        startY: yPos,
        head: [['Status', 'Count']],
        body: statusDistribution.map(item => [item.status_name, item.count]),
        theme: 'grid',
        headStyles: { fillColor: [99, 102, 241] },
      });

      yPos = doc.lastAutoTable.finalY + 15;

      if (yPos > 250) {
        doc.addPage();
        yPos = 20;
      }

      doc.setFontSize(14);
      doc.text('Tickets by Department', 14, yPos);
      yPos += 8;

      autoTable(doc, {
        startY: yPos,
        head: [['Department', 'Total', 'Open', 'Closed']],
        body: departmentData.map(dept => [
          dept.department_name,
          dept.total_tickets,
          dept.open_tickets,
          dept.closed_tickets
        ]),
        theme: 'grid',
        headStyles: { fillColor: [99, 102, 241] },
      });

      yPos = doc.lastAutoTable.finalY + 15;

      if (yPos > 250) {
        doc.addPage();
        yPos = 20;
      }

      doc.setFontSize(14);
      doc.text('Tickets by Priority', 14, yPos);
      yPos += 8;

      autoTable(doc, {
        startY: yPos,
        head: [['Priority', 'Count']],
        body: priorityData.map(item => [item.priority_name, item.count]),
        theme: 'grid',
        headStyles: { fillColor: [99, 102, 241] },
      });

      yPos = doc.lastAutoTable.finalY + 15;

      if (yPos > 250) {
        doc.addPage();
        yPos = 20;
      }

      doc.setFontSize(14);
      doc.text('Top Performing Engineers', 14, yPos);
      yPos += 8;

      autoTable(doc, {
        startY: yPos,
        head: [['Engineer', 'Role', 'Resolved', 'Rate', 'Avg Time']],
        body: topEngineers.map(eng => [
          eng.engineer_name,
          eng.role_name,
          eng.tickets_resolved,
          `${eng.resolution_rate}%`,
          `${eng.avg_resolution_hours}h`
        ]),
        theme: 'grid',
        headStyles: { fillColor: [99, 102, 241] },
      });

      const pageCount = doc.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(8);
        doc.setTextColor(150);
        doc.text(
          `Page ${i} of ${pageCount}`,
          doc.internal.pageSize.getWidth() / 2,
          doc.internal.pageSize.getHeight() - 10,
          { align: 'center' }
        );
      }

      doc.save(`IT_Helpdesk_Analytics_Report_${new Date().toISOString().split('T')[0]}.pdf`);
      
      alert('‚úÖ PDF report exported successfully!');
    } catch (error) {
      console.error('Export error:', error);
      alert(`‚ùå Failed to export PDF: ${error.message}`);
    } finally {
      setExporting(false);
    }
  };

  // Handle export - UNCHANGED
  const handleExport = (type) => {
    if (type === 'pdf') {
      exportToPDF();
    } else {
      exportToCSV();
    }
  };

  // Format activity type - UNCHANGED
  const formatActivityType = (type) => {
    return type
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  };

  // Format date - UNCHANGED
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const now = new Date();
    const diff = Math.floor((now - date) / 1000);

    if (diff < 60) return 'Just now';
    if (diff < 3600) return `${Math.floor(diff / 60)} minutes ago`;
    if (diff < 86400) return `${Math.floor(diff / 3600)} hours ago`;
    if (diff < 604800) return `${Math.floor(diff / 86400)} days ago`;
    
    return date.toLocaleDateString();
  };

  if (loading) {
    return (
      <div className="analytics-page">
        <div className="loading-container">
          <Loader className="spinner" size={48} />
          <p>Loading analytics...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="analytics-page">
        <div className="error-container">
          <AlertTriangle className="error-icon" size={48} />
          <h2>Error Loading Analytics</h2>
          <p>{error}</p>
          <button className="btn-primary" onClick={fetchAnalytics}>
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="analytics-page">
      {/* Export Modal */}
      <ExportModal
        isOpen={showExportModal}
        onClose={() => setShowExportModal(false)}
        onExport={handleExport}
      />

      {/* Page Header */}
      <div className="page-header">
        <div className="header-left">
          <div className="page-title-section">
            <TrendingUp className="page-icon" size={32} />
            <div>
              <h1 className="page-title">Analytics Dashboard</h1>
              <p className="page-subtitle">Track performance and insights</p>
            </div>
          </div>
        </div>
        <div className="header-right">
          <select 
            className="date-range-select"
            value={dateRange}
            onChange={(e) => setDateRange(e.target.value)}
          >
            <option value="7">Last 7 Days</option>
            <option value="30">Last 30 Days</option>
            <option value="60">Last 60 Days</option>
            <option value="90">Last 90 Days</option>
          </select>
          <button 
            className="btn-secondary" 
            onClick={() => setShowExportModal(true)} 
            disabled={exporting}
          >
            {exporting ? (
              <>
                <Loader className="spinner" size={20} />
                Exporting...
              </>
            ) : (
              <>
                <Download size={20} />
                Export Report
              </>
            )}
          </button>
        </div>
      </div>

      {/* Overview Stats */}
      {overview && (
        <div className="stats-grid">
          <div className="stat-card primary">
            <div className="stat-icon">
              <Ticket size={24} />
            </div>
            <div className="stat-content">
              <span className="stat-label">Total Tickets</span>
              <span className="stat-value">{overview.total_tickets || 0}</span>
              <span className="stat-change positive">
                +{overview.tickets_this_week || 0} this week
              </span>
            </div>
          </div>

          <div className="stat-card warning">
            <div className="stat-icon">
              <Clock size={24} />
            </div>
            <div className="stat-content">
              <span className="stat-label">Open Tickets</span>
              <span className="stat-value">{overview.open_tickets || 0}</span>
              <span className="stat-change">
                {overview.tickets_today || 0} created today
              </span>
            </div>
          </div>

          <div className="stat-card success">
            <div className="stat-icon">
              <CheckCircle size={24} />
            </div>
            <div className="stat-content">
              <span className="stat-label">Closed Tickets</span>
              <span className="stat-value">{overview.closed_tickets || 0}</span>
              <span className="stat-change positive">
                {Math.round((overview.closed_tickets / overview.total_tickets) * 100) || 0}% completion rate
              </span>
            </div>
          </div>

          <div className="stat-card info">
            <div className="stat-icon">
              <Activity size={24} />
            </div>
            <div className="stat-content">
              <span className="stat-label">Avg Resolution Time</span>
              <span className="stat-value">{overview.avg_resolution_hours || 0}h</span>
              <span className="stat-change">
                SLA: {overview.sla_compliance || 0}%
              </span>
            </div>
          </div>

          <div className="stat-card neutral">
            <div className="stat-icon">
              <Users size={24} />
            </div>
            <div className="stat-content">
              <span className="stat-label">Active Users</span>
              <span className="stat-value">{overview.active_users || 0}</span>
              <span className="stat-change">
                {overview.active_departments || 0} departments
              </span>
            </div>
          </div>

          <div className="stat-card accent">
            <div className="stat-icon">
              <Calendar size={24} />
            </div>
            <div className="stat-content">
              <span className="stat-label">This Month</span>
              <span className="stat-value">{overview.tickets_this_month || 0}</span>
              <span className="stat-change">
                Tickets created
              </span>
            </div>
          </div>
        </div>
      )}

      {/* Charts Grid */}
      <div className="charts-grid">
        {/* Status Distribution - Pie Chart - FIXED */}
        <div className="chart-card">
          <div className="chart-header">
            <h3 className="chart-title">Ticket Status Distribution</h3>
          </div>
          <div className="chart-content">
            <ResponsiveContainer width="100%" height={420}>
              <PieChart>
                <Pie
                  data={statusDistribution}
                  dataKey="count"
                  nameKey="status_name"
                  cx="50%"
                  cy="45%"
                  innerRadius={0}
                  outerRadius={110}
                  paddingAngle={2}
                >
                  {statusDistribution.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color_code || COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip 
                  contentStyle={{ 
                    background: 'white', 
                    border: '1px solid #e2e8f0', 
                    borderRadius: '8px',
                    padding: '12px'
                  }}
                />
                <Legend 
                  verticalAlign="bottom" 
                  height={100}
                  iconType="circle"
                  iconSize={12}
                  wrapperStyle={{
                    paddingTop: '20px'
                  }}
                  formatter={(value, entry) => {
                    const { payload } = entry;
                    return `${value}: ${payload.count}`;
                  }}
                />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Priority Distribution - Bar Chart */}
        <div className="chart-card">
          <div className="chart-header">
            <h3 className="chart-title">Tickets by Priority</h3>
          </div>
          <div className="chart-content">
            <ResponsiveContainer width="100%" height={420}>
              <BarChart data={priorityData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="priority_name" />
                <YAxis />
                <Tooltip content={<CustomTooltip />} />
                <Bar dataKey="count" fill="#6366f1" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Department Performance - Bar Chart */}
        <div className="chart-card full-width">
          <div className="chart-header">
            <h3 className="chart-title">Tickets by Department</h3>
          </div>
          <div className="chart-content">
            <ResponsiveContainer width="100%" height={350}>
              <BarChart data={departmentData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="department_name" />
                <YAxis />
                <Tooltip content={<CustomTooltip />} />
                <Legend />
                <Bar dataKey="total_tickets" fill="#6366f1" name="Total Tickets" />
                <Bar dataKey="open_tickets" fill="#f59e0b" name="Open" />
                <Bar dataKey="closed_tickets" fill="#10b981" name="Closed" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Ticket Trends - Line Chart */}
        <div className="chart-card full-width">
          <div className="chart-header">
            <h3 className="chart-title">Ticket Trends (Last {dateRange} Days)</h3>
          </div>
          <div className="chart-content">
            <ResponsiveContainer width="100%" height={350}>
              <LineChart data={trendsData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip content={<CustomTooltip />} />
                <Legend />
                <Line 
                  type="monotone" 
                  dataKey="tickets_created" 
                  stroke="#6366f1" 
                  strokeWidth={2}
                  name="Created"
                />
                <Line 
                  type="monotone" 
                  dataKey="tickets_closed" 
                  stroke="#10b981" 
                  strokeWidth={2}
                  name="Closed"
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      {/* Bottom Section */}
      <div className="bottom-grid">
        {/* Top Engineers */}
        <div className="leaderboard-card">
          <div className="card-header">
            <h3 className="card-title">üèÜ Top Performing Engineers</h3>
          </div>
          <div className="leaderboard-content">
            {topEngineers.length === 0 ? (
              <p className="empty-message">No data available</p>
            ) : (
              topEngineers.map((engineer, index) => (
                <div key={engineer.user_id} className="engineer-item">
                  <div className="engineer-rank">#{index + 1}</div>
                  <div className="engineer-info">
                    <span className="engineer-name">{engineer.engineer_name}</span>
                    <span className="engineer-role">{engineer.role_name}</span>
                  </div>
                  <div className="engineer-stats">
                    <div className="stat">
                      <span className="stat-label">Resolved</span>
                      <span className="stat-value">{engineer.tickets_resolved}</span>
                    </div>
                    <div className="stat">
                      <span className="stat-label">Rate</span>
                      <span className="stat-value">{engineer.resolution_rate}%</span>
                    </div>
                    <div className="stat">
                      <span className="stat-label">Avg Time</span>
                      <span className="stat-value">{engineer.avg_resolution_hours}h</span>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>

        {/* Recent Activity */}
        <div className="activity-card">
          <div className="card-header">
            <h3 className="card-title">üìã Recent Activity</h3>
          </div>
          <div className="activity-content">
            {recentActivity.length === 0 ? (
              <p className="empty-message">No recent activity</p>
            ) : (
              recentActivity.map((activity) => (
                <div key={activity.activity_id} className="activity-item">
                  <div className="activity-icon">
                    <Activity size={16} />
                  </div>
                  <div className="activity-details">
                    <p className="activity-text">
                      <strong>{activity.performed_by_name}</strong>{' '}
                      {activity.description || `${formatActivityType(activity.activity_type).toLowerCase()}`}{' '}
                      <strong>#{activity.ticket_number}</strong>
                    </p>
                    <span className="activity-time">{formatDate(activity.performed_at)}</span>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Analytics;